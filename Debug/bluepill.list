
bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004308  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004414  08004414  00014414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800445c  0800445c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800445c  0800445c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800445c  0800445c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800445c  0800445c  0001445c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004460  08004460  00014460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000000c  08004470  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08004470  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2b5  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002745  00000000  00000000  0002d2ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002fa30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  000304a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190b8  00000000  00000000  00030df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2c7  00000000  00000000  00049eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087c6b  00000000  00000000  00059177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0de2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002808  00000000  00000000  000e0e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080043fc 	.word	0x080043fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080043fc 	.word	0x080043fc

0800014c <LoadFilterList>:
	 while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) != 3) { }

	return true;
}

void LoadFilterList(FilterList *filterIdList) {
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < CANID_COUNT; i++) {
 8000154:	2300      	movs	r3, #0
 8000156:	60fb      	str	r3, [r7, #12]
 8000158:	e007      	b.n	800016a <LoadFilterList+0x1e>

        filterIdList->FilterIdList[i] = (uint32_t) i;
 800015a:	68f9      	ldr	r1, [r7, #12]
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	68fa      	ldr	r2, [r7, #12]
 8000160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < CANID_COUNT; i++) {
 8000164:	68fb      	ldr	r3, [r7, #12]
 8000166:	3301      	adds	r3, #1
 8000168:	60fb      	str	r3, [r7, #12]
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	2b03      	cmp	r3, #3
 800016e:	ddf4      	ble.n	800015a <LoadFilterList+0xe>
    }
}
 8000170:	bf00      	nop
 8000172:	bf00      	nop
 8000174:	3714      	adds	r7, #20
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <ConfigFilterList>:

void ConfigFilterList (uint32_t id1, uint32_t id2, uint32_t id3, uint32_t id4, uint32_t filterBank, uint8_t idType, uint8_t filterScale)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b08e      	sub	sp, #56	; 0x38
 8000180:	af00      	add	r7, sp, #0
 8000182:	60f8      	str	r0, [r7, #12]
 8000184:	60b9      	str	r1, [r7, #8]
 8000186:	607a      	str	r2, [r7, #4]
 8000188:	603b      	str	r3, [r7, #0]
    CAN_FilterTypeDef filterConfig = {0};
 800018a:	f107 0310 	add.w	r3, r7, #16
 800018e:	2228      	movs	r2, #40	; 0x28
 8000190:	2100      	movs	r1, #0
 8000192:	4618      	mov	r0, r3
 8000194:	f004 f92a 	bl	80043ec <memset>

    filterConfig.FilterActivation = ENABLE;
 8000198:	2301      	movs	r3, #1
 800019a:	633b      	str	r3, [r7, #48]	; 0x30
    filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800019c:	2300      	movs	r3, #0
 800019e:	623b      	str	r3, [r7, #32]
    filterConfig.FilterBank = filterBank;
 80001a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80001a2:	627b      	str	r3, [r7, #36]	; 0x24

    if (filterScale == FILTER_TYEPE_32) {
 80001a4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80001a8:	2b01      	cmp	r3, #1
 80001aa:	d137      	bne.n	800021c <ConfigFilterList+0xa0>

        filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001ac:	2301      	movs	r3, #1
 80001ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        filterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80001b0:	2301      	movs	r3, #1
 80001b2:	62bb      	str	r3, [r7, #40]	; 0x28

        if (idType == EXT_ID) {
 80001b4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80001b8:	2b01      	cmp	r3, #1
 80001ba:	d11e      	bne.n	80001fa <ConfigFilterList+0x7e>

            filterConfig.FilterIdHigh = (id1 & 0x1FFFFFFF) | (id1 << 31);
 80001bc:	68fb      	ldr	r3, [r7, #12]
 80001be:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80001c2:	68fb      	ldr	r3, [r7, #12]
 80001c4:	07db      	lsls	r3, r3, #31
 80001c6:	4313      	orrs	r3, r2
 80001c8:	613b      	str	r3, [r7, #16]
            filterConfig.FilterIdLow = (id2 & 0x1FFFFFFF) | (id2 << 31);
 80001ca:	68bb      	ldr	r3, [r7, #8]
 80001cc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80001d0:	68bb      	ldr	r3, [r7, #8]
 80001d2:	07db      	lsls	r3, r3, #31
 80001d4:	4313      	orrs	r3, r2
 80001d6:	617b      	str	r3, [r7, #20]
            filterConfig.FilterMaskIdHigh = (id3 & 0x1FFFFFFF) | (idType << 31);
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80001de:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80001e2:	07d2      	lsls	r2, r2, #31
 80001e4:	4313      	orrs	r3, r2
 80001e6:	61bb      	str	r3, [r7, #24]
            filterConfig.FilterMaskIdLow = (id4 & 0x1FFFFFFF) | (idType << 31);
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80001ee:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80001f2:	07d2      	lsls	r2, r2, #31
 80001f4:	4313      	orrs	r3, r2
 80001f6:	61fb      	str	r3, [r7, #28]
 80001f8:	e04d      	b.n	8000296 <ConfigFilterList+0x11a>

        } else {
            filterConfig.FilterIdHigh = id1 & 0x1FFFFFFF;
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000200:	613b      	str	r3, [r7, #16]
            filterConfig.FilterIdLow = id2 & 0x1FFFFFFF;
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000208:	617b      	str	r3, [r7, #20]
            filterConfig.FilterMaskIdHigh = id3 & 0x1FFFFFFF;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000210:	61bb      	str	r3, [r7, #24]
            filterConfig.FilterMaskIdLow = id4 & 0x1FFFFFFF;
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000218:	61fb      	str	r3, [r7, #28]
 800021a:	e03c      	b.n	8000296 <ConfigFilterList+0x11a>
        }

    } else {

        filterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800021c:	2300      	movs	r3, #0
 800021e:	62fb      	str	r3, [r7, #44]	; 0x2c
        filterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8000220:	2301      	movs	r3, #1
 8000222:	62bb      	str	r3, [r7, #40]	; 0x28

        if (idType == EXT_ID) {
 8000224:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000228:	2b01      	cmp	r3, #1
 800022a:	d124      	bne.n	8000276 <ConfigFilterList+0xfa>
            filterConfig.FilterIdHigh = ((id1 & 0x1FFF) << 5) | (idType << 15);
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	015a      	lsls	r2, r3, #5
 8000230:	4b1e      	ldr	r3, [pc, #120]	; (80002ac <ConfigFilterList+0x130>)
 8000232:	4013      	ands	r3, r2
 8000234:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000238:	03d2      	lsls	r2, r2, #15
 800023a:	4313      	orrs	r3, r2
 800023c:	613b      	str	r3, [r7, #16]
            filterConfig.FilterIdLow = ((id2 & 0x1FFF) << 5) | (idType << 15);
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	015a      	lsls	r2, r3, #5
 8000242:	4b1a      	ldr	r3, [pc, #104]	; (80002ac <ConfigFilterList+0x130>)
 8000244:	4013      	ands	r3, r2
 8000246:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800024a:	03d2      	lsls	r2, r2, #15
 800024c:	4313      	orrs	r3, r2
 800024e:	617b      	str	r3, [r7, #20]
            filterConfig.FilterMaskIdHigh = ((id3 & 0x1FFF) << 5) | (idType << 15);
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	015a      	lsls	r2, r3, #5
 8000254:	4b15      	ldr	r3, [pc, #84]	; (80002ac <ConfigFilterList+0x130>)
 8000256:	4013      	ands	r3, r2
 8000258:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800025c:	03d2      	lsls	r2, r2, #15
 800025e:	4313      	orrs	r3, r2
 8000260:	61bb      	str	r3, [r7, #24]
            filterConfig.FilterMaskIdLow = ((id4 & 0x1FFF) << 5) | (idType << 15);
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	015a      	lsls	r2, r3, #5
 8000266:	4b11      	ldr	r3, [pc, #68]	; (80002ac <ConfigFilterList+0x130>)
 8000268:	4013      	ands	r3, r2
 800026a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800026e:	03d2      	lsls	r2, r2, #15
 8000270:	4313      	orrs	r3, r2
 8000272:	61fb      	str	r3, [r7, #28]
 8000274:	e00f      	b.n	8000296 <ConfigFilterList+0x11a>
        } else {
            filterConfig.FilterIdHigh = (id1 & 0x7FF) << 5;
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	015b      	lsls	r3, r3, #5
 800027a:	b29b      	uxth	r3, r3
 800027c:	613b      	str	r3, [r7, #16]
            filterConfig.FilterIdLow = (id2 & 0x7FF) << 5;
 800027e:	68bb      	ldr	r3, [r7, #8]
 8000280:	015b      	lsls	r3, r3, #5
 8000282:	b29b      	uxth	r3, r3
 8000284:	617b      	str	r3, [r7, #20]
            filterConfig.FilterMaskIdHigh = (id3 & 0x7FF) << 5;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	015b      	lsls	r3, r3, #5
 800028a:	b29b      	uxth	r3, r3
 800028c:	61bb      	str	r3, [r7, #24]
            filterConfig.FilterMaskIdLow = (id4 & 0x7FF) << 5;
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	015b      	lsls	r3, r3, #5
 8000292:	b29b      	uxth	r3, r3
 8000294:	61fb      	str	r3, [r7, #28]
        }
    }

    HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 8000296:	f107 0310 	add.w	r3, r7, #16
 800029a:	4619      	mov	r1, r3
 800029c:	4804      	ldr	r0, [pc, #16]	; (80002b0 <ConfigFilterList+0x134>)
 800029e:	f001 fa62 	bl	8001766 <HAL_CAN_ConfigFilter>

   // return (HAL_CAN_ConfigFilter(&hcan, &filterConfig) == HAL_OK) ? false : true;
}
 80002a2:	bf00      	nop
 80002a4:	3738      	adds	r7, #56	; 0x38
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	0003ffe0 	.word	0x0003ffe0
 80002b0:	200000c8 	.word	0x200000c8

080002b4 <InitFilterList>:

void InitFilterList(uint32_t *idList, uint8_t numFilters, uint8_t filterScale)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b08e      	sub	sp, #56	; 0x38
 80002b8:	af04      	add	r7, sp, #16
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	460b      	mov	r3, r1
 80002be:	70fb      	strb	r3, [r7, #3]
 80002c0:	4613      	mov	r3, r2
 80002c2:	70bb      	strb	r3, [r7, #2]

	//Como o protocolo é simples, não foi adicionada a o possibilidade de utilização com EXTID (id com 29 bits)
	uint16_t filterBankCounter = 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t maxFilterBanks = FILTER_MAX_NUM; //STM32F0 tem somente uma interface CAN assim tendo apenas 14 filter banks
 80002c8:	230e      	movs	r3, #14
 80002ca:	77fb      	strb	r3, [r7, #31]
	uint32_t id, id1, id2, id3, id4 = 0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	61bb      	str	r3, [r7, #24]


	if (numFilters > maxFilterBanks)
 80002d0:	78fa      	ldrb	r2, [r7, #3]
 80002d2:	7ffb      	ldrb	r3, [r7, #31]
 80002d4:	429a      	cmp	r2, r3
 80002d6:	d901      	bls.n	80002dc <InitFilterList+0x28>
	{
		numFilters = maxFilterBanks;
 80002d8:	7ffb      	ldrb	r3, [r7, #31]
 80002da:	70fb      	strb	r3, [r7, #3]
	}


	if (filterScale == FILTER_TYEPE_32) //Utilizando o registrados em 32bits
 80002dc:	78bb      	ldrb	r3, [r7, #2]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d12b      	bne.n	800033a <InitFilterList+0x86>
	{
		for (id = 0; id < numFilters && filterBankCounter < maxFilterBanks; id += 2)
 80002e2:	2300      	movs	r3, #0
 80002e4:	623b      	str	r3, [r7, #32]
 80002e6:	e01e      	b.n	8000326 <InitFilterList+0x72>
		{
			id1 = idList[id];
 80002e8:	6a3b      	ldr	r3, [r7, #32]
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	4413      	add	r3, r2
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	617b      	str	r3, [r7, #20]
			id2 = idList[id + 1];
 80002f4:	6a3b      	ldr	r3, [r7, #32]
 80002f6:	3301      	adds	r3, #1
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	4413      	add	r3, r2
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	613b      	str	r3, [r7, #16]
			ConfigFilterList(id1, id2, 0x0000, 0x0000, filterBankCounter, STD_ID, filterScale); // considerar sómente o ID1 e ID2
 8000302:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000304:	78ba      	ldrb	r2, [r7, #2]
 8000306:	9202      	str	r2, [sp, #8]
 8000308:	2200      	movs	r2, #0
 800030a:	9201      	str	r2, [sp, #4]
 800030c:	9300      	str	r3, [sp, #0]
 800030e:	2300      	movs	r3, #0
 8000310:	2200      	movs	r2, #0
 8000312:	6939      	ldr	r1, [r7, #16]
 8000314:	6978      	ldr	r0, [r7, #20]
 8000316:	f7ff ff31 	bl	800017c <ConfigFilterList>
			filterBankCounter++;
 800031a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800031c:	3301      	adds	r3, #1
 800031e:	84fb      	strh	r3, [r7, #38]	; 0x26
		for (id = 0; id < numFilters && filterBankCounter < maxFilterBanks; id += 2)
 8000320:	6a3b      	ldr	r3, [r7, #32]
 8000322:	3302      	adds	r3, #2
 8000324:	623b      	str	r3, [r7, #32]
 8000326:	78fb      	ldrb	r3, [r7, #3]
 8000328:	6a3a      	ldr	r2, [r7, #32]
 800032a:	429a      	cmp	r2, r3
 800032c:	d23e      	bcs.n	80003ac <InitFilterList+0xf8>
 800032e:	7ffb      	ldrb	r3, [r7, #31]
 8000330:	b29b      	uxth	r3, r3
 8000332:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000334:	429a      	cmp	r2, r3
 8000336:	d3d7      	bcc.n	80002e8 <InitFilterList+0x34>
			id4 = idList[id + 3];
			ConfigFilterList(id1, id2, id3, id4, filterBankCounter, STD_ID, filterScale);
			filterBankCounter++;
		}
	}
}
 8000338:	e038      	b.n	80003ac <InitFilterList+0xf8>
		for (id = 0; id < numFilters && filterBankCounter < maxFilterBanks;id += 4)
 800033a:	2300      	movs	r3, #0
 800033c:	623b      	str	r3, [r7, #32]
 800033e:	e02c      	b.n	800039a <InitFilterList+0xe6>
			id1 = idList[id];
 8000340:	6a3b      	ldr	r3, [r7, #32]
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	4413      	add	r3, r2
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	617b      	str	r3, [r7, #20]
			id2 = idList[id + 1];
 800034c:	6a3b      	ldr	r3, [r7, #32]
 800034e:	3301      	adds	r3, #1
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	4413      	add	r3, r2
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	613b      	str	r3, [r7, #16]
			id3 = idList[id + 2];
 800035a:	6a3b      	ldr	r3, [r7, #32]
 800035c:	3302      	adds	r3, #2
 800035e:	009b      	lsls	r3, r3, #2
 8000360:	687a      	ldr	r2, [r7, #4]
 8000362:	4413      	add	r3, r2
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	60fb      	str	r3, [r7, #12]
			id4 = idList[id + 3];
 8000368:	6a3b      	ldr	r3, [r7, #32]
 800036a:	3303      	adds	r3, #3
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	687a      	ldr	r2, [r7, #4]
 8000370:	4413      	add	r3, r2
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	61bb      	str	r3, [r7, #24]
			ConfigFilterList(id1, id2, id3, id4, filterBankCounter, STD_ID, filterScale);
 8000376:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000378:	78ba      	ldrb	r2, [r7, #2]
 800037a:	9202      	str	r2, [sp, #8]
 800037c:	2200      	movs	r2, #0
 800037e:	9201      	str	r2, [sp, #4]
 8000380:	9300      	str	r3, [sp, #0]
 8000382:	69bb      	ldr	r3, [r7, #24]
 8000384:	68fa      	ldr	r2, [r7, #12]
 8000386:	6939      	ldr	r1, [r7, #16]
 8000388:	6978      	ldr	r0, [r7, #20]
 800038a:	f7ff fef7 	bl	800017c <ConfigFilterList>
			filterBankCounter++;
 800038e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000390:	3301      	adds	r3, #1
 8000392:	84fb      	strh	r3, [r7, #38]	; 0x26
		for (id = 0; id < numFilters && filterBankCounter < maxFilterBanks;id += 4)
 8000394:	6a3b      	ldr	r3, [r7, #32]
 8000396:	3304      	adds	r3, #4
 8000398:	623b      	str	r3, [r7, #32]
 800039a:	78fb      	ldrb	r3, [r7, #3]
 800039c:	6a3a      	ldr	r2, [r7, #32]
 800039e:	429a      	cmp	r2, r3
 80003a0:	d204      	bcs.n	80003ac <InitFilterList+0xf8>
 80003a2:	7ffb      	ldrb	r3, [r7, #31]
 80003a4:	b29b      	uxth	r3, r3
 80003a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d3c9      	bcc.n	8000340 <InitFilterList+0x8c>
}
 80003ac:	bf00      	nop
 80003ae:	3728      	adds	r7, #40	; 0x28
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003c4:	4b18      	ldr	r3, [pc, #96]	; (8000428 <MX_ADC1_Init+0x74>)
 80003c6:	4a19      	ldr	r2, [pc, #100]	; (800042c <MX_ADC1_Init+0x78>)
 80003c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ca:	4b17      	ldr	r3, [pc, #92]	; (8000428 <MX_ADC1_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003d0:	4b15      	ldr	r3, [pc, #84]	; (8000428 <MX_ADC1_Init+0x74>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003d6:	4b14      	ldr	r3, [pc, #80]	; (8000428 <MX_ADC1_Init+0x74>)
 80003d8:	2200      	movs	r2, #0
 80003da:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <MX_ADC1_Init+0x74>)
 80003de:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003e4:	4b10      	ldr	r3, [pc, #64]	; (8000428 <MX_ADC1_Init+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80003ea:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <MX_ADC1_Init+0x74>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003f0:	480d      	ldr	r0, [pc, #52]	; (8000428 <MX_ADC1_Init+0x74>)
 80003f2:	f000 fc43 	bl	8000c7c <HAL_ADC_Init>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003fc:	f000 fa6c 	bl	80008d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000400:	2301      	movs	r3, #1
 8000402:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000404:	2301      	movs	r3, #1
 8000406:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000408:	2307      	movs	r3, #7
 800040a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	4619      	mov	r1, r3
 8000410:	4805      	ldr	r0, [pc, #20]	; (8000428 <MX_ADC1_Init+0x74>)
 8000412:	f000 fe05 	bl	8001020 <HAL_ADC_ConfigChannel>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800041c:	f000 fa5c 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000420:	bf00      	nop
 8000422:	3710      	adds	r7, #16
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	2000002c 	.word	0x2000002c
 800042c:	40012400 	.word	0x40012400

08000430 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a28      	ldr	r2, [pc, #160]	; (80004ec <HAL_ADC_MspInit+0xbc>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d149      	bne.n	80004e4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000450:	4b27      	ldr	r3, [pc, #156]	; (80004f0 <HAL_ADC_MspInit+0xc0>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a26      	ldr	r2, [pc, #152]	; (80004f0 <HAL_ADC_MspInit+0xc0>)
 8000456:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b24      	ldr	r3, [pc, #144]	; (80004f0 <HAL_ADC_MspInit+0xc0>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000464:	60fb      	str	r3, [r7, #12]
 8000466:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000468:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <HAL_ADC_MspInit+0xc0>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a20      	ldr	r2, [pc, #128]	; (80004f0 <HAL_ADC_MspInit+0xc0>)
 800046e:	f043 0304 	orr.w	r3, r3, #4
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b1e      	ldr	r3, [pc, #120]	; (80004f0 <HAL_ADC_MspInit+0xc0>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0304 	and.w	r3, r3, #4
 800047c:	60bb      	str	r3, [r7, #8]
 800047e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_Pin;
 8000480:	2302      	movs	r3, #2
 8000482:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000484:	2303      	movs	r3, #3
 8000486:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_GPIO_Port, &GPIO_InitStruct);
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	4619      	mov	r1, r3
 800048e:	4819      	ldr	r0, [pc, #100]	; (80004f4 <HAL_ADC_MspInit+0xc4>)
 8000490:	f002 f93e 	bl	8002710 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000494:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <HAL_ADC_MspInit+0xc8>)
 8000496:	4a19      	ldr	r2, [pc, #100]	; (80004fc <HAL_ADC_MspInit+0xcc>)
 8000498:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800049a:	4b17      	ldr	r3, [pc, #92]	; (80004f8 <HAL_ADC_MspInit+0xc8>)
 800049c:	2200      	movs	r2, #0
 800049e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80004a0:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <HAL_ADC_MspInit+0xc8>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80004a6:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <HAL_ADC_MspInit+0xc8>)
 80004a8:	2280      	movs	r2, #128	; 0x80
 80004aa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <HAL_ADC_MspInit+0xc8>)
 80004ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80004b4:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <HAL_ADC_MspInit+0xc8>)
 80004b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80004bc:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <HAL_ADC_MspInit+0xc8>)
 80004be:	2220      	movs	r2, #32
 80004c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80004c2:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <HAL_ADC_MspInit+0xc8>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80004c8:	480b      	ldr	r0, [pc, #44]	; (80004f8 <HAL_ADC_MspInit+0xc8>)
 80004ca:	f001 fe7f 	bl	80021cc <HAL_DMA_Init>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80004d4:	f000 fa00 	bl	80008d8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <HAL_ADC_MspInit+0xc8>)
 80004dc:	621a      	str	r2, [r3, #32]
 80004de:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <HAL_ADC_MspInit+0xc8>)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80004e4:	bf00      	nop
 80004e6:	3720      	adds	r7, #32
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40012400 	.word	0x40012400
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40010800 	.word	0x40010800
 80004f8:	2000005c 	.word	0x2000005c
 80004fc:	40020008 	.word	0x40020008

08000500 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000504:	4b23      	ldr	r3, [pc, #140]	; (8000594 <MX_CAN_Init+0x94>)
 8000506:	4a24      	ldr	r2, [pc, #144]	; (8000598 <MX_CAN_Init+0x98>)
 8000508:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800050a:	4b22      	ldr	r3, [pc, #136]	; (8000594 <MX_CAN_Init+0x94>)
 800050c:	2204      	movs	r2, #4
 800050e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000510:	4b20      	ldr	r3, [pc, #128]	; (8000594 <MX_CAN_Init+0x94>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000516:	4b1f      	ldr	r3, [pc, #124]	; (8000594 <MX_CAN_Init+0x94>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 800051c:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <MX_CAN_Init+0x94>)
 800051e:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000522:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000524:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <MX_CAN_Init+0x94>)
 8000526:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800052a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800052c:	4b19      	ldr	r3, [pc, #100]	; (8000594 <MX_CAN_Init+0x94>)
 800052e:	2200      	movs	r2, #0
 8000530:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000532:	4b18      	ldr	r3, [pc, #96]	; (8000594 <MX_CAN_Init+0x94>)
 8000534:	2200      	movs	r2, #0
 8000536:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000538:	4b16      	ldr	r3, [pc, #88]	; (8000594 <MX_CAN_Init+0x94>)
 800053a:	2200      	movs	r2, #0
 800053c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <MX_CAN_Init+0x94>)
 8000540:	2200      	movs	r2, #0
 8000542:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000544:	4b13      	ldr	r3, [pc, #76]	; (8000594 <MX_CAN_Init+0x94>)
 8000546:	2200      	movs	r2, #0
 8000548:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800054a:	4b12      	ldr	r3, [pc, #72]	; (8000594 <MX_CAN_Init+0x94>)
 800054c:	2200      	movs	r2, #0
 800054e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000550:	4810      	ldr	r0, [pc, #64]	; (8000594 <MX_CAN_Init+0x94>)
 8000552:	f001 f80d 	bl	8001570 <HAL_CAN_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800055c:	f000 f9bc 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  LoadFilterList(&filterList);
 8000560:	480e      	ldr	r0, [pc, #56]	; (800059c <MX_CAN_Init+0x9c>)
 8000562:	f7ff fdf3 	bl	800014c <LoadFilterList>
  InitFilterList(filterList.FilterIdList, CANID_COUNT , FILTER_TYPE_16);
 8000566:	2200      	movs	r2, #0
 8000568:	2104      	movs	r1, #4
 800056a:	480c      	ldr	r0, [pc, #48]	; (800059c <MX_CAN_Init+0x9c>)
 800056c:	f7ff fea2 	bl	80002b4 <InitFilterList>



  /*##-3- Start the CAN peripheral ###########################################*/
     if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000570:	4808      	ldr	r0, [pc, #32]	; (8000594 <MX_CAN_Init+0x94>)
 8000572:	f001 f9c1 	bl	80018f8 <HAL_CAN_Start>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_CAN_Init+0x80>
     {
       /* Start Error */
       Error_Handler();
 800057c:	f000 f9ac 	bl	80008d8 <Error_Handler>
     /*##-4- Start the Transmission process #####################################*/

       // CAN_Write_Packet(TxData, CAN_RTR_DATA, (uint16_t *) 8);

      /*##-4- Activate CAN RX notification #######################################*/
	HAL_CAN_Start(&hcan);
 8000580:	4804      	ldr	r0, [pc, #16]	; (8000594 <MX_CAN_Init+0x94>)
 8000582:	f001 f9b9 	bl	80018f8 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000586:	2102      	movs	r1, #2
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <MX_CAN_Init+0x94>)
 800058a:	f001 fac8 	bl	8001b1e <HAL_CAN_ActivateNotification>



  /* USER CODE END CAN_Init 2 */

}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	200000c8 	.word	0x200000c8
 8000598:	40006400 	.word	0x40006400
 800059c:	200000b8 	.word	0x200000b8

080005a0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a20      	ldr	r2, [pc, #128]	; (800063c <HAL_CAN_MspInit+0x9c>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d139      	bne.n	8000634 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <HAL_CAN_MspInit+0xa0>)
 80005c2:	69db      	ldr	r3, [r3, #28]
 80005c4:	4a1e      	ldr	r2, [pc, #120]	; (8000640 <HAL_CAN_MspInit+0xa0>)
 80005c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ca:	61d3      	str	r3, [r2, #28]
 80005cc:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <HAL_CAN_MspInit+0xa0>)
 80005ce:	69db      	ldr	r3, [r3, #28]
 80005d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <HAL_CAN_MspInit+0xa0>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a18      	ldr	r2, [pc, #96]	; (8000640 <HAL_CAN_MspInit+0xa0>)
 80005de:	f043 0304 	orr.w	r3, r3, #4
 80005e2:	6193      	str	r3, [r2, #24]
 80005e4:	4b16      	ldr	r3, [pc, #88]	; (8000640 <HAL_CAN_MspInit+0xa0>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f003 0304 	and.w	r3, r3, #4
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80005f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	f107 0310 	add.w	r3, r7, #16
 8000602:	4619      	mov	r1, r3
 8000604:	480f      	ldr	r0, [pc, #60]	; (8000644 <HAL_CAN_MspInit+0xa4>)
 8000606:	f002 f883 	bl	8002710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000610:	2302      	movs	r3, #2
 8000612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000614:	2303      	movs	r3, #3
 8000616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	f107 0310 	add.w	r3, r7, #16
 800061c:	4619      	mov	r1, r3
 800061e:	4809      	ldr	r0, [pc, #36]	; (8000644 <HAL_CAN_MspInit+0xa4>)
 8000620:	f002 f876 	bl	8002710 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000624:	2200      	movs	r2, #0
 8000626:	2100      	movs	r1, #0
 8000628:	2014      	movs	r0, #20
 800062a:	f001 fd98 	bl	800215e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800062e:	2014      	movs	r0, #20
 8000630:	f001 fdb1 	bl	8002196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000634:	bf00      	nop
 8000636:	3720      	adds	r7, #32
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40006400 	.word	0x40006400
 8000640:	40021000 	.word	0x40021000
 8000644:	40010800 	.word	0x40010800

08000648 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <MX_DMA_Init+0x48>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a0f      	ldr	r2, [pc, #60]	; (8000690 <MX_DMA_Init+0x48>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <MX_DMA_Init+0x48>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2100      	movs	r1, #0
 800066a:	200b      	movs	r0, #11
 800066c:	f001 fd77 	bl	800215e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000670:	200b      	movs	r0, #11
 8000672:	f001 fd90 	bl	8002196 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	200f      	movs	r0, #15
 800067c:	f001 fd6f 	bl	800215e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000680:	200f      	movs	r0, #15
 8000682:	f001 fd88 	bl	8002196 <HAL_NVIC_EnableIRQ>

}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0310 	add.w	r3, r7, #16
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a8:	4b28      	ldr	r3, [pc, #160]	; (800074c <MX_GPIO_Init+0xb8>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a27      	ldr	r2, [pc, #156]	; (800074c <MX_GPIO_Init+0xb8>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b25      	ldr	r3, [pc, #148]	; (800074c <MX_GPIO_Init+0xb8>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0310 	and.w	r3, r3, #16
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <MX_GPIO_Init+0xb8>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	4a21      	ldr	r2, [pc, #132]	; (800074c <MX_GPIO_Init+0xb8>)
 80006c6:	f043 0304 	orr.w	r3, r3, #4
 80006ca:	6193      	str	r3, [r2, #24]
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_GPIO_Init+0xb8>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f003 0304 	and.w	r3, r3, #4
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_GPIO_Init+0xb8>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a1b      	ldr	r2, [pc, #108]	; (800074c <MX_GPIO_Init+0xb8>)
 80006de:	f043 0308 	orr.w	r3, r3, #8
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_GPIO_Init+0xb8>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0308 	and.w	r3, r3, #8
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f6:	4816      	ldr	r0, [pc, #88]	; (8000750 <MX_GPIO_Init+0xbc>)
 80006f8:	f002 f986 	bl	8002a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000702:	4814      	ldr	r0, [pc, #80]	; (8000754 <MX_GPIO_Init+0xc0>)
 8000704:	f002 f980 	bl	8002a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000708:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800070c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	2301      	movs	r3, #1
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	2302      	movs	r3, #2
 8000718:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800071a:	f107 0310 	add.w	r3, r7, #16
 800071e:	4619      	mov	r1, r3
 8000720:	480b      	ldr	r0, [pc, #44]	; (8000750 <MX_GPIO_Init+0xbc>)
 8000722:	f001 fff5 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072c:	2301      	movs	r3, #1
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2302      	movs	r3, #2
 8000736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	4619      	mov	r1, r3
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_GPIO_Init+0xc0>)
 8000740:	f001 ffe6 	bl	8002710 <HAL_GPIO_Init>

}
 8000744:	bf00      	nop
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40021000 	.word	0x40021000
 8000750:	40011000 	.word	0x40011000
 8000754:	40010c00 	.word	0x40010c00

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075e:	f000 fa07 	bl	8000b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000762:	f000 f859 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000766:	f7ff ff95 	bl	8000694 <MX_GPIO_Init>
  MX_DMA_Init();
 800076a:	f7ff ff6d 	bl	8000648 <MX_DMA_Init>
  MX_CAN_Init();
 800076e:	f7ff fec7 	bl	8000500 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000772:	f000 f92f 	bl	80009d4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000776:	f7ff fe1d 	bl	80003b4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800077a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800077e:	481d      	ldr	r0, [pc, #116]	; (80007f4 <main+0x9c>)
 8000780:	f002 f95a 	bl	8002a38 <HAL_GPIO_TogglePin>
	HAL_UART_Receive_DMA(&huart1, canRX, 8);
 8000784:	2208      	movs	r2, #8
 8000786:	491c      	ldr	r1, [pc, #112]	; (80007f8 <main+0xa0>)
 8000788:	481c      	ldr	r0, [pc, #112]	; (80007fc <main+0xa4>)
 800078a:	f002 ff3b 	bl	8003604 <HAL_UART_Receive_DMA>
	HAL_ADCEx_Calibration_Start(&hadc1);
 800078e:	481c      	ldr	r0, [pc, #112]	; (8000800 <main+0xa8>)
 8000790:	f000 fe40 	bl	8001414 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, &adcint, 1);
 8000794:	2201      	movs	r2, #1
 8000796:	491b      	ldr	r1, [pc, #108]	; (8000804 <main+0xac>)
 8000798:	4819      	ldr	r0, [pc, #100]	; (8000800 <main+0xa8>)
 800079a:	f000 fb47 	bl	8000e2c <HAL_ADC_Start_DMA>


	  uint8_t tx[8] = {1,225,67,68,69,70,71,72};
 800079e:	4a1a      	ldr	r2, [pc, #104]	; (8000808 <main+0xb0>)
 80007a0:	463b      	mov	r3, r7
 80007a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007a6:	e883 0003 	stmia.w	r3, {r0, r1}
	  TxHeader.StdId             = 0x0;     // ID do dispositivo
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <main+0xb4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
	  TxHeader.RTR               = CAN_RTR_DATA;       //(Remote Transmission Request) especifica Remote Fraame ou Data Frame.
 80007b0:	4b16      	ldr	r3, [pc, #88]	; (800080c <main+0xb4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
	  TxHeader.IDE               = CAN_ID_STD;    //define o tipo de id (standard ou extended
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <main+0xb4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
	  TxHeader.DLC               = 8;      //Tamanho do pacote 0 - 8 bytes
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <main+0xb4>)
 80007be:	2208      	movs	r2, #8
 80007c0:	611a      	str	r2, [r3, #16]
	  TxHeader.TransmitGlobalTime = DISABLE;
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <main+0xb4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	751a      	strb	r2, [r3, #20]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	#ifdef TRANSMITER
	HAL_Delay(2000);
 80007c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007cc:	f000 fa32 	bl	8000c34 <HAL_Delay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d4:	4807      	ldr	r0, [pc, #28]	; (80007f4 <main+0x9c>)
 80007d6:	f002 f92f 	bl	8002a38 <HAL_GPIO_TogglePin>

	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, tx, &TxMailbox))
 80007da:	463a      	mov	r2, r7
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <main+0xb8>)
 80007de:	490b      	ldr	r1, [pc, #44]	; (800080c <main+0xb4>)
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <main+0xbc>)
 80007e2:	f001 f8cd 	bl	8001980 <HAL_CAN_AddTxMessage>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d0ed      	beq.n	80007c8 <main+0x70>
	{
		Error_Handler();
 80007ec:	f000 f874 	bl	80008d8 <Error_Handler>
	HAL_Delay(2000);
 80007f0:	e7ea      	b.n	80007c8 <main+0x70>
 80007f2:	bf00      	nop
 80007f4:	40011000 	.word	0x40011000
 80007f8:	200000f4 	.word	0x200000f4
 80007fc:	200000fc 	.word	0x200000fc
 8000800:	2000002c 	.word	0x2000002c
 8000804:	200000f0 	.word	0x200000f0
 8000808:	08004414 	.word	0x08004414
 800080c:	200000a0 	.word	0x200000a0
 8000810:	20000028 	.word	0x20000028
 8000814:	200000c8 	.word	0x200000c8

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b094      	sub	sp, #80	; 0x50
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000822:	2228      	movs	r2, #40	; 0x28
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f003 fde0 	bl	80043ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000848:	2302      	movs	r3, #2
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084c:	2301      	movs	r3, #1
 800084e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000850:	2310      	movs	r3, #16
 8000852:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000854:	2302      	movs	r3, #2
 8000856:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000858:	2300      	movs	r3, #0
 800085a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800085c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000860:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000866:	4618      	mov	r0, r3
 8000868:	f002 f900 	bl	8002a6c <HAL_RCC_OscConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000872:	f000 f831 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000876:	230f      	movs	r3, #15
 8000878:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087a:	2302      	movs	r3, #2
 800087c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000886:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	2102      	movs	r1, #2
 8000892:	4618      	mov	r0, r3
 8000894:	f002 fb6c 	bl	8002f70 <HAL_RCC_ClockConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800089e:	f000 f81b 	bl	80008d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008a2:	2302      	movs	r3, #2
 80008a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80008a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008aa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 fcec 	bl	800328c <HAL_RCCEx_PeriphCLKConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008ba:	f000 f80d 	bl	80008d8 <Error_Handler>
  }
}
 80008be:	bf00      	nop
 80008c0:	3750      	adds	r7, #80	; 0x50
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
#endif

}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <HAL_MspInit+0x40>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	4a0d      	ldr	r2, [pc, #52]	; (8000924 <HAL_MspInit+0x40>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6193      	str	r3, [r2, #24]
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <HAL_MspInit+0x40>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <HAL_MspInit+0x40>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	4a07      	ldr	r2, [pc, #28]	; (8000924 <HAL_MspInit+0x40>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090c:	61d3      	str	r3, [r2, #28]
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <HAL_MspInit+0x40>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	40021000 	.word	0x40021000

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800092c:	e7fe      	b.n	800092c <NMI_Handler+0x4>

0800092e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <HardFault_Handler+0x4>

08000934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <MemManage_Handler+0x4>

0800093a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <BusFault_Handler+0x4>

08000940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <UsageFault_Handler+0x4>

08000946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr

08000952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr

0800096a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800096e:	f000 f945 	bl	8000bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <DMA1_Channel1_IRQHandler+0x10>)
 800097e:	f001 fd93 	bl	80024a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000005c 	.word	0x2000005c

0800098c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000990:	4802      	ldr	r0, [pc, #8]	; (800099c <DMA1_Channel5_IRQHandler+0x10>)
 8000992:	f001 fd89 	bl	80024a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000144 	.word	0x20000144

080009a0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80009a6:	f001 f8df 	bl	8001b68 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200000c8 	.word	0x200000c8

080009b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <USART1_IRQHandler+0x10>)
 80009ba:	f002 fe49 	bl	8003650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200000fc 	.word	0x200000fc

080009c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <MX_USART1_UART_Init+0x50>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 8000a0c:	f002 fdaa 	bl	8003564 <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a16:	f7ff ff5f 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200000fc 	.word	0x200000fc
 8000a24:	40013800 	.word	0x40013800

08000a28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a33      	ldr	r2, [pc, #204]	; (8000b10 <HAL_UART_MspInit+0xe8>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d15f      	bne.n	8000b08 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a48:	4b32      	ldr	r3, [pc, #200]	; (8000b14 <HAL_UART_MspInit+0xec>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a31      	ldr	r2, [pc, #196]	; (8000b14 <HAL_UART_MspInit+0xec>)
 8000a4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b2f      	ldr	r3, [pc, #188]	; (8000b14 <HAL_UART_MspInit+0xec>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b2c      	ldr	r3, [pc, #176]	; (8000b14 <HAL_UART_MspInit+0xec>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a2b      	ldr	r2, [pc, #172]	; (8000b14 <HAL_UART_MspInit+0xec>)
 8000a66:	f043 0304 	orr.w	r3, r3, #4
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <HAL_UART_MspInit+0xec>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0304 	and.w	r3, r3, #4
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 0310 	add.w	r3, r7, #16
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4822      	ldr	r0, [pc, #136]	; (8000b18 <HAL_UART_MspInit+0xf0>)
 8000a8e:	f001 fe3f 	bl	8002710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	481c      	ldr	r0, [pc, #112]	; (8000b18 <HAL_UART_MspInit+0xf0>)
 8000aa8:	f001 fe32 	bl	8002710 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000aac:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <HAL_UART_MspInit+0xf4>)
 8000aae:	4a1c      	ldr	r2, [pc, #112]	; (8000b20 <HAL_UART_MspInit+0xf8>)
 8000ab0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <HAL_UART_MspInit+0xf4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_UART_MspInit+0xf4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <HAL_UART_MspInit+0xf4>)
 8000ac0:	2280      	movs	r2, #128	; 0x80
 8000ac2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_UART_MspInit+0xf4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <HAL_UART_MspInit+0xf4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_UART_MspInit+0xf4>)
 8000ad2:	2220      	movs	r2, #32
 8000ad4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_UART_MspInit+0xf4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000adc:	480f      	ldr	r0, [pc, #60]	; (8000b1c <HAL_UART_MspInit+0xf4>)
 8000ade:	f001 fb75 	bl	80021cc <HAL_DMA_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000ae8:	f7ff fef6 	bl	80008d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a0b      	ldr	r2, [pc, #44]	; (8000b1c <HAL_UART_MspInit+0xf4>)
 8000af0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <HAL_UART_MspInit+0xf4>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2100      	movs	r1, #0
 8000afc:	2025      	movs	r0, #37	; 0x25
 8000afe:	f001 fb2e 	bl	800215e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b02:	2025      	movs	r0, #37	; 0x25
 8000b04:	f001 fb47 	bl	8002196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b08:	bf00      	nop
 8000b0a:	3720      	adds	r7, #32
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40013800 	.word	0x40013800
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010800 	.word	0x40010800
 8000b1c:	20000144 	.word	0x20000144
 8000b20:	40020058 	.word	0x40020058

08000b24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b24:	f7ff ff50 	bl	80009c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b28:	480b      	ldr	r0, [pc, #44]	; (8000b58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b2a:	490c      	ldr	r1, [pc, #48]	; (8000b5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b2c:	4a0c      	ldr	r2, [pc, #48]	; (8000b60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b30:	e002      	b.n	8000b38 <LoopCopyDataInit>

08000b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b36:	3304      	adds	r3, #4

08000b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b3c:	d3f9      	bcc.n	8000b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3e:	4a09      	ldr	r2, [pc, #36]	; (8000b64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b40:	4c09      	ldr	r4, [pc, #36]	; (8000b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b44:	e001      	b.n	8000b4a <LoopFillZerobss>

08000b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b48:	3204      	adds	r2, #4

08000b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b4c:	d3fb      	bcc.n	8000b46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b4e:	f003 fc29 	bl	80043a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b52:	f7ff fe01 	bl	8000758 <main>
  bx lr
 8000b56:	4770      	bx	lr
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b60:	08004464 	.word	0x08004464
  ldr r2, =_sbss
 8000b64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b68:	2000018c 	.word	0x2000018c

08000b6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC1_2_IRQHandler>
	...

08000b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_Init+0x28>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_Init+0x28>)
 8000b7a:	f043 0310 	orr.w	r3, r3, #16
 8000b7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f001 fae1 	bl	8002148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b86:	200f      	movs	r0, #15
 8000b88:	f000 f808 	bl	8000b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b8c:	f7ff feaa 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40022000 	.word	0x40022000

08000b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_InitTick+0x54>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_InitTick+0x58>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 faf9 	bl	80021b2 <HAL_SYSTICK_Config>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00e      	b.n	8000be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b0f      	cmp	r3, #15
 8000bce:	d80a      	bhi.n	8000be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f001 fac1 	bl	800215e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bdc:	4a06      	ldr	r2, [pc, #24]	; (8000bf8 <HAL_InitTick+0x5c>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
 8000be4:	e000      	b.n	8000be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000004 	.word	0x20000004

08000bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_IncTick+0x1c>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_IncTick+0x20>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4a03      	ldr	r2, [pc, #12]	; (8000c1c <HAL_IncTick+0x20>)
 8000c0e:	6013      	str	r3, [r2, #0]
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000188 	.word	0x20000188

08000c20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b02      	ldr	r3, [pc, #8]	; (8000c30 <HAL_GetTick+0x10>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	20000188 	.word	0x20000188

08000c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c3c:	f7ff fff0 	bl	8000c20 <HAL_GetTick>
 8000c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c4c:	d005      	beq.n	8000c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_Delay+0x44>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4413      	add	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c5a:	bf00      	nop
 8000c5c:	f7ff ffe0 	bl	8000c20 <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d8f7      	bhi.n	8000c5c <HAL_Delay+0x28>
  {
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000008 	.word	0x20000008

08000c7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c84:	2300      	movs	r3, #0
 8000c86:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d101      	bne.n	8000c9e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e0be      	b.n	8000e1c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d109      	bne.n	8000cc0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff fbb8 	bl	8000430 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f000 faff 	bl	80012c4 <ADC_ConversionStop_Disable>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cce:	f003 0310 	and.w	r3, r3, #16
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8099 	bne.w	8000e0a <HAL_ADC_Init+0x18e>
 8000cd8:	7dfb      	ldrb	r3, [r7, #23]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f040 8095 	bne.w	8000e0a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ce8:	f023 0302 	bic.w	r3, r3, #2
 8000cec:	f043 0202 	orr.w	r2, r3, #2
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cfc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	7b1b      	ldrb	r3, [r3, #12]
 8000d02:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d04:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d14:	d003      	beq.n	8000d1e <HAL_ADC_Init+0xa2>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d102      	bne.n	8000d24 <HAL_ADC_Init+0xa8>
 8000d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d22:	e000      	b.n	8000d26 <HAL_ADC_Init+0xaa>
 8000d24:	2300      	movs	r3, #0
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	7d1b      	ldrb	r3, [r3, #20]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d119      	bne.n	8000d68 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	7b1b      	ldrb	r3, [r3, #12]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d109      	bne.n	8000d50 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	3b01      	subs	r3, #1
 8000d42:	035a      	lsls	r2, r3, #13
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	e00b      	b.n	8000d68 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d54:	f043 0220 	orr.w	r2, r3, #32
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d60:	f043 0201 	orr.w	r2, r3, #1
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	4b28      	ldr	r3, [pc, #160]	; (8000e24 <HAL_ADC_Init+0x1a8>)
 8000d84:	4013      	ands	r3, r2
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	6812      	ldr	r2, [r2, #0]
 8000d8a:	68b9      	ldr	r1, [r7, #8]
 8000d8c:	430b      	orrs	r3, r1
 8000d8e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d98:	d003      	beq.n	8000da2 <HAL_ADC_Init+0x126>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d104      	bne.n	8000dac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	051b      	lsls	r3, r3, #20
 8000daa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_ADC_Init+0x1ac>)
 8000dc8:	4013      	ands	r3, r2
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d10b      	bne.n	8000de8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dda:	f023 0303 	bic.w	r3, r3, #3
 8000dde:	f043 0201 	orr.w	r2, r3, #1
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000de6:	e018      	b.n	8000e1a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dec:	f023 0312 	bic.w	r3, r3, #18
 8000df0:	f043 0210 	orr.w	r2, r3, #16
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfc:	f043 0201 	orr.w	r2, r3, #1
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e08:	e007      	b.n	8000e1a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0e:	f043 0210 	orr.w	r2, r3, #16
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	ffe1f7fd 	.word	0xffe1f7fd
 8000e28:	ff1f0efe 	.word	0xff1f0efe

08000e2c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a64      	ldr	r2, [pc, #400]	; (8000fd4 <HAL_ADC_Start_DMA+0x1a8>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d004      	beq.n	8000e50 <HAL_ADC_Start_DMA+0x24>
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a63      	ldr	r2, [pc, #396]	; (8000fd8 <HAL_ADC_Start_DMA+0x1ac>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d106      	bne.n	8000e5e <HAL_ADC_Start_DMA+0x32>
 8000e50:	4b60      	ldr	r3, [pc, #384]	; (8000fd4 <HAL_ADC_Start_DMA+0x1a8>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f040 80b3 	bne.w	8000fc4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d101      	bne.n	8000e6c <HAL_ADC_Start_DMA+0x40>
 8000e68:	2302      	movs	r3, #2
 8000e6a:	e0ae      	b.n	8000fca <HAL_ADC_Start_DMA+0x19e>
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e74:	68f8      	ldr	r0, [r7, #12]
 8000e76:	f000 f9cb 	bl	8001210 <ADC_Enable>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e7e:	7dfb      	ldrb	r3, [r7, #23]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f040 809a 	bne.w	8000fba <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e8e:	f023 0301 	bic.w	r3, r3, #1
 8000e92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a4e      	ldr	r2, [pc, #312]	; (8000fd8 <HAL_ADC_Start_DMA+0x1ac>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d105      	bne.n	8000eb0 <HAL_ADC_Start_DMA+0x84>
 8000ea4:	4b4b      	ldr	r3, [pc, #300]	; (8000fd4 <HAL_ADC_Start_DMA+0x1a8>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d115      	bne.n	8000edc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d026      	beq.n	8000f18 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ece:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ed2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000eda:	e01d      	b.n	8000f18 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a39      	ldr	r2, [pc, #228]	; (8000fd4 <HAL_ADC_Start_DMA+0x1a8>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d004      	beq.n	8000efc <HAL_ADC_Start_DMA+0xd0>
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a38      	ldr	r2, [pc, #224]	; (8000fd8 <HAL_ADC_Start_DMA+0x1ac>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d10d      	bne.n	8000f18 <HAL_ADC_Start_DMA+0xec>
 8000efc:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <HAL_ADC_Start_DMA+0x1a8>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d007      	beq.n	8000f18 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d006      	beq.n	8000f32 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f28:	f023 0206 	bic.w	r2, r3, #6
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f30:	e002      	b.n	8000f38 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2200      	movs	r2, #0
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	4a25      	ldr	r2, [pc, #148]	; (8000fdc <HAL_ADC_Start_DMA+0x1b0>)
 8000f46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6a1b      	ldr	r3, [r3, #32]
 8000f4c:	4a24      	ldr	r2, [pc, #144]	; (8000fe0 <HAL_ADC_Start_DMA+0x1b4>)
 8000f4e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	4a23      	ldr	r2, [pc, #140]	; (8000fe4 <HAL_ADC_Start_DMA+0x1b8>)
 8000f56:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f06f 0202 	mvn.w	r2, #2
 8000f60:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f70:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6a18      	ldr	r0, [r3, #32]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	334c      	adds	r3, #76	; 0x4c
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f001 f97d 	bl	8002280 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f90:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f94:	d108      	bne.n	8000fa8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000fa4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000fa6:	e00f      	b.n	8000fc8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000fb6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000fb8:	e006      	b.n	8000fc8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000fc2:	e001      	b.n	8000fc8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40012400 	.word	0x40012400
 8000fd8:	40012800 	.word	0x40012800
 8000fdc:	08001347 	.word	0x08001347
 8000fe0:	080013c3 	.word	0x080013c3
 8000fe4:	080013df 	.word	0x080013df

08000fe8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr

08000ffa <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
	...

08001020 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001038:	2b01      	cmp	r3, #1
 800103a:	d101      	bne.n	8001040 <HAL_ADC_ConfigChannel+0x20>
 800103c:	2302      	movs	r3, #2
 800103e:	e0dc      	b.n	80011fa <HAL_ADC_ConfigChannel+0x1da>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2201      	movs	r2, #1
 8001044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b06      	cmp	r3, #6
 800104e:	d81c      	bhi.n	800108a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	3b05      	subs	r3, #5
 8001062:	221f      	movs	r2, #31
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	4019      	ands	r1, r3
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	3b05      	subs	r3, #5
 800107c:	fa00 f203 	lsl.w	r2, r0, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	430a      	orrs	r2, r1
 8001086:	635a      	str	r2, [r3, #52]	; 0x34
 8001088:	e03c      	b.n	8001104 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b0c      	cmp	r3, #12
 8001090:	d81c      	bhi.n	80010cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	3b23      	subs	r3, #35	; 0x23
 80010a4:	221f      	movs	r2, #31
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	4019      	ands	r1, r3
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	6818      	ldr	r0, [r3, #0]
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	3b23      	subs	r3, #35	; 0x23
 80010be:	fa00 f203 	lsl.w	r2, r0, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	430a      	orrs	r2, r1
 80010c8:	631a      	str	r2, [r3, #48]	; 0x30
 80010ca:	e01b      	b.n	8001104 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	3b41      	subs	r3, #65	; 0x41
 80010de:	221f      	movs	r2, #31
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	4019      	ands	r1, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	3b41      	subs	r3, #65	; 0x41
 80010f8:	fa00 f203 	lsl.w	r2, r0, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	430a      	orrs	r2, r1
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b09      	cmp	r3, #9
 800110a:	d91c      	bls.n	8001146 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68d9      	ldr	r1, [r3, #12]
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4613      	mov	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	3b1e      	subs	r3, #30
 800111e:	2207      	movs	r2, #7
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	4019      	ands	r1, r3
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	6898      	ldr	r0, [r3, #8]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	3b1e      	subs	r3, #30
 8001138:	fa00 f203 	lsl.w	r2, r0, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	430a      	orrs	r2, r1
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	e019      	b.n	800117a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6919      	ldr	r1, [r3, #16]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	4413      	add	r3, r2
 8001156:	2207      	movs	r2, #7
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	4019      	ands	r1, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	6898      	ldr	r0, [r3, #8]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4613      	mov	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4413      	add	r3, r2
 800116e:	fa00 f203 	lsl.w	r2, r0, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	430a      	orrs	r2, r1
 8001178:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b10      	cmp	r3, #16
 8001180:	d003      	beq.n	800118a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001186:	2b11      	cmp	r3, #17
 8001188:	d132      	bne.n	80011f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a1d      	ldr	r2, [pc, #116]	; (8001204 <HAL_ADC_ConfigChannel+0x1e4>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d125      	bne.n	80011e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d126      	bne.n	80011f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011b0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b10      	cmp	r3, #16
 80011b8:	d11a      	bne.n	80011f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <HAL_ADC_ConfigChannel+0x1e8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a13      	ldr	r2, [pc, #76]	; (800120c <HAL_ADC_ConfigChannel+0x1ec>)
 80011c0:	fba2 2303 	umull	r2, r3, r2, r3
 80011c4:	0c9a      	lsrs	r2, r3, #18
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011d0:	e002      	b.n	80011d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f9      	bne.n	80011d2 <HAL_ADC_ConfigChannel+0x1b2>
 80011de:	e007      	b.n	80011f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e4:	f043 0220 	orr.w	r2, r3, #32
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	40012400 	.word	0x40012400
 8001208:	20000000 	.word	0x20000000
 800120c:	431bde83 	.word	0x431bde83

08001210 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	2b01      	cmp	r3, #1
 800122c:	d040      	beq.n	80012b0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f042 0201 	orr.w	r2, r2, #1
 800123c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <ADC_Enable+0xac>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a1f      	ldr	r2, [pc, #124]	; (80012c0 <ADC_Enable+0xb0>)
 8001244:	fba2 2303 	umull	r2, r3, r2, r3
 8001248:	0c9b      	lsrs	r3, r3, #18
 800124a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800124c:	e002      	b.n	8001254 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	3b01      	subs	r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f9      	bne.n	800124e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800125a:	f7ff fce1 	bl	8000c20 <HAL_GetTick>
 800125e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001260:	e01f      	b.n	80012a2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001262:	f7ff fcdd 	bl	8000c20 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d918      	bls.n	80012a2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b01      	cmp	r3, #1
 800127c:	d011      	beq.n	80012a2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001282:	f043 0210 	orr.w	r2, r3, #16
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128e:	f043 0201 	orr.w	r2, r3, #1
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e007      	b.n	80012b2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d1d8      	bne.n	8001262 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000000 	.word	0x20000000
 80012c0:	431bde83 	.word	0x431bde83

080012c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d12e      	bne.n	800133c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0201 	bic.w	r2, r2, #1
 80012ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012ee:	f7ff fc97 	bl	8000c20 <HAL_GetTick>
 80012f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012f4:	e01b      	b.n	800132e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012f6:	f7ff fc93 	bl	8000c20 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d914      	bls.n	800132e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b01      	cmp	r3, #1
 8001310:	d10d      	bne.n	800132e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001316:	f043 0210 	orr.w	r2, r3, #16
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001322:	f043 0201 	orr.w	r2, r3, #1
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e007      	b.n	800133e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	2b01      	cmp	r3, #1
 800133a:	d0dc      	beq.n	80012f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b084      	sub	sp, #16
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001352:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001358:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800135c:	2b00      	cmp	r3, #0
 800135e:	d127      	bne.n	80013b0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001364:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001376:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800137a:	d115      	bne.n	80013a8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001380:	2b00      	cmp	r3, #0
 8001382:	d111      	bne.n	80013a8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001388:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d105      	bne.n	80013a8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	f043 0201 	orr.w	r2, r3, #1
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f7ff fe1d 	bl	8000fe8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80013ae:	e004      	b.n	80013ba <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	4798      	blx	r3
}
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b084      	sub	sp, #16
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f7ff fe12 	bl	8000ffa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b084      	sub	sp, #16
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fc:	f043 0204 	orr.w	r2, r3, #4
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f7ff fe01 	bl	800100c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800142a:	2b01      	cmp	r3, #1
 800142c:	d101      	bne.n	8001432 <HAL_ADCEx_Calibration_Start+0x1e>
 800142e:	2302      	movs	r3, #2
 8001430:	e097      	b.n	8001562 <HAL_ADCEx_Calibration_Start+0x14e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2201      	movs	r2, #1
 8001436:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ff42 	bl	80012c4 <ADC_ConversionStop_Disable>
 8001440:	4603      	mov	r3, r0
 8001442:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff fee3 	bl	8001210 <ADC_Enable>
 800144a:	4603      	mov	r3, r0
 800144c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800144e:	7dfb      	ldrb	r3, [r7, #23]
 8001450:	2b00      	cmp	r3, #0
 8001452:	f040 8081 	bne.w	8001558 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800145e:	f023 0302 	bic.w	r3, r3, #2
 8001462:	f043 0202 	orr.w	r2, r3, #2
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800146a:	4b40      	ldr	r3, [pc, #256]	; (800156c <HAL_ADCEx_Calibration_Start+0x158>)
 800146c:	681c      	ldr	r4, [r3, #0]
 800146e:	2002      	movs	r0, #2
 8001470:	f001 ffc2 	bl	80033f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001474:	4603      	mov	r3, r0
 8001476:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800147a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800147c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800147e:	e002      	b.n	8001486 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	3b01      	subs	r3, #1
 8001484:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1f9      	bne.n	8001480 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 0208 	orr.w	r2, r2, #8
 800149a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800149c:	f7ff fbc0 	bl	8000c20 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80014a2:	e01b      	b.n	80014dc <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80014a4:	f7ff fbbc 	bl	8000c20 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b0a      	cmp	r3, #10
 80014b0:	d914      	bls.n	80014dc <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00d      	beq.n	80014dc <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	f023 0312 	bic.w	r3, r3, #18
 80014c8:	f043 0210 	orr.w	r2, r3, #16
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e042      	b.n	8001562 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1dc      	bne.n	80014a4 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f042 0204 	orr.w	r2, r2, #4
 80014f8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80014fa:	f7ff fb91 	bl	8000c20 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001500:	e01b      	b.n	800153a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001502:	f7ff fb8d 	bl	8000c20 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b0a      	cmp	r3, #10
 800150e:	d914      	bls.n	800153a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00d      	beq.n	800153a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001522:	f023 0312 	bic.w	r3, r3, #18
 8001526:	f043 0210 	orr.w	r2, r3, #16
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e013      	b.n	8001562 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1dc      	bne.n	8001502 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	f023 0303 	bic.w	r3, r3, #3
 8001550:	f043 0201 	orr.w	r2, r3, #1
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001560:	7dfb      	ldrb	r3, [r7, #23]
}
 8001562:	4618      	mov	r0, r3
 8001564:	371c      	adds	r7, #28
 8001566:	46bd      	mov	sp, r7
 8001568:	bd90      	pop	{r4, r7, pc}
 800156a:	bf00      	nop
 800156c:	20000000 	.word	0x20000000

08001570 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e0ed      	b.n	800175e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d102      	bne.n	8001594 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff f806 	bl	80005a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0201 	orr.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015a4:	f7ff fb3c 	bl	8000c20 <HAL_GetTick>
 80015a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015aa:	e012      	b.n	80015d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015ac:	f7ff fb38 	bl	8000c20 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b0a      	cmp	r3, #10
 80015b8:	d90b      	bls.n	80015d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2205      	movs	r2, #5
 80015ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e0c5      	b.n	800175e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0e5      	beq.n	80015ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0202 	bic.w	r2, r2, #2
 80015ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015f0:	f7ff fb16 	bl	8000c20 <HAL_GetTick>
 80015f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015f6:	e012      	b.n	800161e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015f8:	f7ff fb12 	bl	8000c20 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b0a      	cmp	r3, #10
 8001604:	d90b      	bls.n	800161e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2205      	movs	r2, #5
 8001616:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e09f      	b.n	800175e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1e5      	bne.n	80015f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7e1b      	ldrb	r3, [r3, #24]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d108      	bne.n	8001646 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	e007      	b.n	8001656 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001654:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	7e5b      	ldrb	r3, [r3, #25]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d108      	bne.n	8001670 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	e007      	b.n	8001680 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800167e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7e9b      	ldrb	r3, [r3, #26]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d108      	bne.n	800169a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0220 	orr.w	r2, r2, #32
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	e007      	b.n	80016aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0220 	bic.w	r2, r2, #32
 80016a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	7edb      	ldrb	r3, [r3, #27]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d108      	bne.n	80016c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 0210 	bic.w	r2, r2, #16
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	e007      	b.n	80016d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0210 	orr.w	r2, r2, #16
 80016d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	7f1b      	ldrb	r3, [r3, #28]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d108      	bne.n	80016ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0208 	orr.w	r2, r2, #8
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	e007      	b.n	80016fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0208 	bic.w	r2, r2, #8
 80016fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	7f5b      	ldrb	r3, [r3, #29]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d108      	bne.n	8001718 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0204 	orr.w	r2, r2, #4
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e007      	b.n	8001728 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0204 	bic.w	r2, r2, #4
 8001726:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	ea42 0103 	orr.w	r1, r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	1e5a      	subs	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001766:	b480      	push	{r7}
 8001768:	b087      	sub	sp, #28
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800177c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800177e:	7cfb      	ldrb	r3, [r7, #19]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d003      	beq.n	800178c <HAL_CAN_ConfigFilter+0x26>
 8001784:	7cfb      	ldrb	r3, [r7, #19]
 8001786:	2b02      	cmp	r3, #2
 8001788:	f040 80aa 	bne.w	80018e0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001792:	f043 0201 	orr.w	r2, r3, #1
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	f003 031f 	and.w	r3, r3, #31
 80017a4:	2201      	movs	r2, #1
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d123      	bne.n	800180e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	401a      	ands	r2, r3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	3248      	adds	r2, #72	; 0x48
 80017ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001802:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001804:	6979      	ldr	r1, [r7, #20]
 8001806:	3348      	adds	r3, #72	; 0x48
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	440b      	add	r3, r1
 800180c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d122      	bne.n	800185c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	431a      	orrs	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001836:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	3248      	adds	r2, #72	; 0x48
 800183c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001850:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001852:	6979      	ldr	r1, [r7, #20]
 8001854:	3348      	adds	r3, #72	; 0x48
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d109      	bne.n	8001878 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	43db      	mvns	r3, r3
 800186e:	401a      	ands	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001876:	e007      	b.n	8001888 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	431a      	orrs	r2, r3
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d109      	bne.n	80018a4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	43db      	mvns	r3, r3
 800189a:	401a      	ands	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80018a2:	e007      	b.n	80018b4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	431a      	orrs	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d107      	bne.n	80018cc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	431a      	orrs	r2, r3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018d2:	f023 0201 	bic.w	r2, r3, #1
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	e006      	b.n	80018ee <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
  }
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	371c      	adds	r7, #28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b01      	cmp	r3, #1
 800190a:	d12e      	bne.n	800196a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2202      	movs	r2, #2
 8001910:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0201 	bic.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001924:	f7ff f97c 	bl	8000c20 <HAL_GetTick>
 8001928:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800192a:	e012      	b.n	8001952 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800192c:	f7ff f978 	bl	8000c20 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b0a      	cmp	r3, #10
 8001938:	d90b      	bls.n	8001952 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2205      	movs	r2, #5
 800194a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e012      	b.n	8001978 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1e5      	bne.n	800192c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	e006      	b.n	8001978 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
  }
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	; 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001994:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800199e:	7ffb      	ldrb	r3, [r7, #31]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d003      	beq.n	80019ac <HAL_CAN_AddTxMessage+0x2c>
 80019a4:	7ffb      	ldrb	r3, [r7, #31]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	f040 80ad 	bne.w	8001b06 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10a      	bne.n	80019cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d105      	bne.n	80019cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 8095 	beq.w	8001af6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	0e1b      	lsrs	r3, r3, #24
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80019d6:	2201      	movs	r2, #1
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	409a      	lsls	r2, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10d      	bne.n	8001a04 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019f2:	68f9      	ldr	r1, [r7, #12]
 80019f4:	6809      	ldr	r1, [r1, #0]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3318      	adds	r3, #24
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	440b      	add	r3, r1
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	e00f      	b.n	8001a24 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a0e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a14:	68f9      	ldr	r1, [r7, #12]
 8001a16:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a18:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	3318      	adds	r3, #24
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	440b      	add	r3, r1
 8001a22:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6819      	ldr	r1, [r3, #0]
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	691a      	ldr	r2, [r3, #16]
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	3318      	adds	r3, #24
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	440b      	add	r3, r1
 8001a34:	3304      	adds	r3, #4
 8001a36:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	7d1b      	ldrb	r3, [r3, #20]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d111      	bne.n	8001a64 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3318      	adds	r3, #24
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	6811      	ldr	r1, [r2, #0]
 8001a54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	3318      	adds	r3, #24
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	440b      	add	r3, r1
 8001a60:	3304      	adds	r3, #4
 8001a62:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3307      	adds	r3, #7
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	061a      	lsls	r2, r3, #24
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3306      	adds	r3, #6
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	041b      	lsls	r3, r3, #16
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3305      	adds	r3, #5
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	021b      	lsls	r3, r3, #8
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	3204      	adds	r2, #4
 8001a84:	7812      	ldrb	r2, [r2, #0]
 8001a86:	4610      	mov	r0, r2
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	6811      	ldr	r1, [r2, #0]
 8001a8c:	ea43 0200 	orr.w	r2, r3, r0
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	440b      	add	r3, r1
 8001a96:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001a9a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3303      	adds	r3, #3
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	061a      	lsls	r2, r3, #24
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	041b      	lsls	r3, r3, #16
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	7812      	ldrb	r2, [r2, #0]
 8001abc:	4610      	mov	r0, r2
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	6811      	ldr	r1, [r2, #0]
 8001ac2:	ea43 0200 	orr.w	r2, r3, r0
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	440b      	add	r3, r1
 8001acc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001ad0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3318      	adds	r3, #24
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	4413      	add	r3, r2
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	6811      	ldr	r1, [r2, #0]
 8001ae4:	f043 0201 	orr.w	r2, r3, #1
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	3318      	adds	r3, #24
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	440b      	add	r3, r1
 8001af0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	e00e      	b.n	8001b14 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e006      	b.n	8001b14 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
  }
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3724      	adds	r7, #36	; 0x24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b085      	sub	sp, #20
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b2e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d002      	beq.n	8001b3c <HAL_CAN_ActivateNotification+0x1e>
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d109      	bne.n	8001b50 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6959      	ldr	r1, [r3, #20]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	e006      	b.n	8001b5e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
  }
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d07c      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d023      	beq.n	8001c00 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f983 	bl	8001ed6 <HAL_CAN_TxMailbox0CompleteCallback>
 8001bd0:	e016      	b.n	8001c00 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d004      	beq.n	8001be6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
 8001be4:	e00c      	b.n	8001c00 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d004      	beq.n	8001bfa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf8:	e002      	b.n	8001c00 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f986 	bl	8001f0c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d024      	beq.n	8001c54 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f962 	bl	8001ee8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001c24:	e016      	b.n	8001c54 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d004      	beq.n	8001c3a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
 8001c38:	e00c      	b.n	8001c54 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d004      	beq.n	8001c4e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4c:	e002      	b.n	8001c54 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f965 	bl	8001f1e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d024      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f941 	bl	8001efa <HAL_CAN_TxMailbox2CompleteCallback>
 8001c78:	e016      	b.n	8001ca8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d004      	beq.n	8001c8e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8c:	e00c      	b.n	8001ca8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d004      	beq.n	8001ca2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca0:	e002      	b.n	8001ca8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f944 	bl	8001f30 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ca8:	6a3b      	ldr	r3, [r7, #32]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00c      	beq.n	8001ccc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f003 0310 	and.w	r3, r3, #16
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d007      	beq.n	8001ccc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2210      	movs	r2, #16
 8001cca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00b      	beq.n	8001cee <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d006      	beq.n	8001cee <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2208      	movs	r2, #8
 8001ce6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f92a 	bl	8001f42 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d009      	beq.n	8001d0c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7fe fddd 	bl	80008c6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00c      	beq.n	8001d30 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d007      	beq.n	8001d30 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d30:	6a3b      	ldr	r3, [r7, #32]
 8001d32:	f003 0320 	and.w	r3, r3, #32
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00b      	beq.n	8001d52 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d006      	beq.n	8001d52 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2208      	movs	r2, #8
 8001d4a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f90a 	bl	8001f66 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d009      	beq.n	8001d70 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f8f2 	bl	8001f54 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d006      	beq.n	8001d92 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2210      	movs	r2, #16
 8001d8a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f8f3 	bl	8001f78 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00b      	beq.n	8001db4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d006      	beq.n	8001db4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2208      	movs	r2, #8
 8001dac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f8eb 	bl	8001f8a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d07b      	beq.n	8001eb6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d072      	beq.n	8001eae <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d008      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d008      	beq.n	8001e00 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	f043 0302 	orr.w	r3, r3, #2
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d008      	beq.n	8001e1c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e1c:	6a3b      	ldr	r3, [r7, #32]
 8001e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d043      	beq.n	8001eae <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d03e      	beq.n	8001eae <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e36:	2b60      	cmp	r3, #96	; 0x60
 8001e38:	d02b      	beq.n	8001e92 <HAL_CAN_IRQHandler+0x32a>
 8001e3a:	2b60      	cmp	r3, #96	; 0x60
 8001e3c:	d82e      	bhi.n	8001e9c <HAL_CAN_IRQHandler+0x334>
 8001e3e:	2b50      	cmp	r3, #80	; 0x50
 8001e40:	d022      	beq.n	8001e88 <HAL_CAN_IRQHandler+0x320>
 8001e42:	2b50      	cmp	r3, #80	; 0x50
 8001e44:	d82a      	bhi.n	8001e9c <HAL_CAN_IRQHandler+0x334>
 8001e46:	2b40      	cmp	r3, #64	; 0x40
 8001e48:	d019      	beq.n	8001e7e <HAL_CAN_IRQHandler+0x316>
 8001e4a:	2b40      	cmp	r3, #64	; 0x40
 8001e4c:	d826      	bhi.n	8001e9c <HAL_CAN_IRQHandler+0x334>
 8001e4e:	2b30      	cmp	r3, #48	; 0x30
 8001e50:	d010      	beq.n	8001e74 <HAL_CAN_IRQHandler+0x30c>
 8001e52:	2b30      	cmp	r3, #48	; 0x30
 8001e54:	d822      	bhi.n	8001e9c <HAL_CAN_IRQHandler+0x334>
 8001e56:	2b10      	cmp	r3, #16
 8001e58:	d002      	beq.n	8001e60 <HAL_CAN_IRQHandler+0x2f8>
 8001e5a:	2b20      	cmp	r3, #32
 8001e5c:	d005      	beq.n	8001e6a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e5e:	e01d      	b.n	8001e9c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	f043 0308 	orr.w	r3, r3, #8
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e68:	e019      	b.n	8001e9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	f043 0310 	orr.w	r3, r3, #16
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e72:	e014      	b.n	8001e9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	f043 0320 	orr.w	r3, r3, #32
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e7c:	e00f      	b.n	8001e9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e86:	e00a      	b.n	8001e9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e90:	e005      	b.n	8001e9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e9a:	e000      	b.n	8001e9e <HAL_CAN_IRQHandler+0x336>
            break;
 8001e9c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	699a      	ldr	r2, [r3, #24]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001eac:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f867 	bl	8001f9c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ece:	bf00      	nop
 8001ed0:	3728      	adds	r7, #40	; 0x28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr

08001efa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr

08001f42 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr

08001f54 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr

08001f66 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr

08001f8a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr
	...

08001fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fe2:	4a04      	ldr	r2, [pc, #16]	; (8001ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	60d3      	str	r3, [r2, #12]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ffc:	4b04      	ldr	r3, [pc, #16]	; (8002010 <__NVIC_GetPriorityGrouping+0x18>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	0a1b      	lsrs	r3, r3, #8
 8002002:	f003 0307 	and.w	r3, r3, #7
}
 8002006:	4618      	mov	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	2b00      	cmp	r3, #0
 8002024:	db0b      	blt.n	800203e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	f003 021f 	and.w	r2, r3, #31
 800202c:	4906      	ldr	r1, [pc, #24]	; (8002048 <__NVIC_EnableIRQ+0x34>)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	095b      	lsrs	r3, r3, #5
 8002034:	2001      	movs	r0, #1
 8002036:	fa00 f202 	lsl.w	r2, r0, r2
 800203a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	e000e100 	.word	0xe000e100

0800204c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	6039      	str	r1, [r7, #0]
 8002056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205c:	2b00      	cmp	r3, #0
 800205e:	db0a      	blt.n	8002076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	b2da      	uxtb	r2, r3
 8002064:	490c      	ldr	r1, [pc, #48]	; (8002098 <__NVIC_SetPriority+0x4c>)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	0112      	lsls	r2, r2, #4
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	440b      	add	r3, r1
 8002070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002074:	e00a      	b.n	800208c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4908      	ldr	r1, [pc, #32]	; (800209c <__NVIC_SetPriority+0x50>)
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	3b04      	subs	r3, #4
 8002084:	0112      	lsls	r2, r2, #4
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	440b      	add	r3, r1
 800208a:	761a      	strb	r2, [r3, #24]
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	e000e100 	.word	0xe000e100
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	; 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f1c3 0307 	rsb	r3, r3, #7
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	bf28      	it	cs
 80020be:	2304      	movcs	r3, #4
 80020c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3304      	adds	r3, #4
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d902      	bls.n	80020d0 <NVIC_EncodePriority+0x30>
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3b03      	subs	r3, #3
 80020ce:	e000      	b.n	80020d2 <NVIC_EncodePriority+0x32>
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	f04f 32ff 	mov.w	r2, #4294967295
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43da      	mvns	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	401a      	ands	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	fa01 f303 	lsl.w	r3, r1, r3
 80020f2:	43d9      	mvns	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f8:	4313      	orrs	r3, r2
         );
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3724      	adds	r7, #36	; 0x24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002114:	d301      	bcc.n	800211a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002116:	2301      	movs	r3, #1
 8002118:	e00f      	b.n	800213a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800211a:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <SysTick_Config+0x40>)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002122:	210f      	movs	r1, #15
 8002124:	f04f 30ff 	mov.w	r0, #4294967295
 8002128:	f7ff ff90 	bl	800204c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <SysTick_Config+0x40>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002132:	4b04      	ldr	r3, [pc, #16]	; (8002144 <SysTick_Config+0x40>)
 8002134:	2207      	movs	r2, #7
 8002136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	e000e010 	.word	0xe000e010

08002148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff ff2d 	bl	8001fb0 <__NVIC_SetPriorityGrouping>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800215e:	b580      	push	{r7, lr}
 8002160:	b086      	sub	sp, #24
 8002162:	af00      	add	r7, sp, #0
 8002164:	4603      	mov	r3, r0
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002170:	f7ff ff42 	bl	8001ff8 <__NVIC_GetPriorityGrouping>
 8002174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	6978      	ldr	r0, [r7, #20]
 800217c:	f7ff ff90 	bl	80020a0 <NVIC_EncodePriority>
 8002180:	4602      	mov	r2, r0
 8002182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff5f 	bl	800204c <__NVIC_SetPriority>
}
 800218e:	bf00      	nop
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	4603      	mov	r3, r0
 800219e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff35 	bl	8002014 <__NVIC_EnableIRQ>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff ffa2 	bl	8002104 <SysTick_Config>
 80021c0:	4603      	mov	r3, r0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e043      	b.n	800226a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	4b22      	ldr	r3, [pc, #136]	; (8002274 <HAL_DMA_Init+0xa8>)
 80021ea:	4413      	add	r3, r2
 80021ec:	4a22      	ldr	r2, [pc, #136]	; (8002278 <HAL_DMA_Init+0xac>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	091b      	lsrs	r3, r3, #4
 80021f4:	009a      	lsls	r2, r3, #2
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a1f      	ldr	r2, [pc, #124]	; (800227c <HAL_DMA_Init+0xb0>)
 80021fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002216:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800221a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002224:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002230:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800223c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	bffdfff8 	.word	0xbffdfff8
 8002278:	cccccccd 	.word	0xcccccccd
 800227c:	40020000 	.word	0x40020000

08002280 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_DMA_Start_IT+0x20>
 800229c:	2302      	movs	r3, #2
 800229e:	e04b      	b.n	8002338 <HAL_DMA_Start_IT+0xb8>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d13a      	bne.n	800232a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0201 	bic.w	r2, r2, #1
 80022d0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 f9eb 	bl	80026b4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 020e 	orr.w	r2, r2, #14
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	e00f      	b.n	8002318 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0204 	bic.w	r2, r2, #4
 8002306:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 020a 	orr.w	r2, r2, #10
 8002316:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0201 	orr.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	e005      	b.n	8002336 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002332:	2302      	movs	r3, #2
 8002334:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002336:	7dfb      	ldrb	r3, [r7, #23]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d008      	beq.n	800236a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2204      	movs	r2, #4
 800235c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e020      	b.n	80023ac <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 020e 	bic.w	r2, r2, #14
 8002378:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0201 	bic.w	r2, r2, #1
 8002388:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002392:	2101      	movs	r1, #1
 8002394:	fa01 f202 	lsl.w	r2, r1, r2
 8002398:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
	...

080023b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d005      	beq.n	80023dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2204      	movs	r2, #4
 80023d4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
 80023da:	e051      	b.n	8002480 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 020e 	bic.w	r2, r2, #14
 80023ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0201 	bic.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a22      	ldr	r2, [pc, #136]	; (800248c <HAL_DMA_Abort_IT+0xd4>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d029      	beq.n	800245a <HAL_DMA_Abort_IT+0xa2>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a21      	ldr	r2, [pc, #132]	; (8002490 <HAL_DMA_Abort_IT+0xd8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d022      	beq.n	8002456 <HAL_DMA_Abort_IT+0x9e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a1f      	ldr	r2, [pc, #124]	; (8002494 <HAL_DMA_Abort_IT+0xdc>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d01a      	beq.n	8002450 <HAL_DMA_Abort_IT+0x98>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a1e      	ldr	r2, [pc, #120]	; (8002498 <HAL_DMA_Abort_IT+0xe0>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d012      	beq.n	800244a <HAL_DMA_Abort_IT+0x92>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a1c      	ldr	r2, [pc, #112]	; (800249c <HAL_DMA_Abort_IT+0xe4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00a      	beq.n	8002444 <HAL_DMA_Abort_IT+0x8c>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <HAL_DMA_Abort_IT+0xe8>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d102      	bne.n	800243e <HAL_DMA_Abort_IT+0x86>
 8002438:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800243c:	e00e      	b.n	800245c <HAL_DMA_Abort_IT+0xa4>
 800243e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002442:	e00b      	b.n	800245c <HAL_DMA_Abort_IT+0xa4>
 8002444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002448:	e008      	b.n	800245c <HAL_DMA_Abort_IT+0xa4>
 800244a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800244e:	e005      	b.n	800245c <HAL_DMA_Abort_IT+0xa4>
 8002450:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002454:	e002      	b.n	800245c <HAL_DMA_Abort_IT+0xa4>
 8002456:	2310      	movs	r3, #16
 8002458:	e000      	b.n	800245c <HAL_DMA_Abort_IT+0xa4>
 800245a:	2301      	movs	r3, #1
 800245c:	4a11      	ldr	r2, [pc, #68]	; (80024a4 <HAL_DMA_Abort_IT+0xec>)
 800245e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	4798      	blx	r3
    } 
  }
  return status;
 8002480:	7bfb      	ldrb	r3, [r7, #15]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40020008 	.word	0x40020008
 8002490:	4002001c 	.word	0x4002001c
 8002494:	40020030 	.word	0x40020030
 8002498:	40020044 	.word	0x40020044
 800249c:	40020058 	.word	0x40020058
 80024a0:	4002006c 	.word	0x4002006c
 80024a4:	40020000 	.word	0x40020000

080024a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	2204      	movs	r2, #4
 80024c6:	409a      	lsls	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d04f      	beq.n	8002570 <HAL_DMA_IRQHandler+0xc8>
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d04a      	beq.n	8002570 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0320 	and.w	r3, r3, #32
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d107      	bne.n	80024f8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0204 	bic.w	r2, r2, #4
 80024f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a66      	ldr	r2, [pc, #408]	; (8002698 <HAL_DMA_IRQHandler+0x1f0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d029      	beq.n	8002556 <HAL_DMA_IRQHandler+0xae>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a65      	ldr	r2, [pc, #404]	; (800269c <HAL_DMA_IRQHandler+0x1f4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d022      	beq.n	8002552 <HAL_DMA_IRQHandler+0xaa>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a63      	ldr	r2, [pc, #396]	; (80026a0 <HAL_DMA_IRQHandler+0x1f8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d01a      	beq.n	800254c <HAL_DMA_IRQHandler+0xa4>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a62      	ldr	r2, [pc, #392]	; (80026a4 <HAL_DMA_IRQHandler+0x1fc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d012      	beq.n	8002546 <HAL_DMA_IRQHandler+0x9e>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a60      	ldr	r2, [pc, #384]	; (80026a8 <HAL_DMA_IRQHandler+0x200>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00a      	beq.n	8002540 <HAL_DMA_IRQHandler+0x98>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a5f      	ldr	r2, [pc, #380]	; (80026ac <HAL_DMA_IRQHandler+0x204>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d102      	bne.n	800253a <HAL_DMA_IRQHandler+0x92>
 8002534:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002538:	e00e      	b.n	8002558 <HAL_DMA_IRQHandler+0xb0>
 800253a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800253e:	e00b      	b.n	8002558 <HAL_DMA_IRQHandler+0xb0>
 8002540:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002544:	e008      	b.n	8002558 <HAL_DMA_IRQHandler+0xb0>
 8002546:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800254a:	e005      	b.n	8002558 <HAL_DMA_IRQHandler+0xb0>
 800254c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002550:	e002      	b.n	8002558 <HAL_DMA_IRQHandler+0xb0>
 8002552:	2340      	movs	r3, #64	; 0x40
 8002554:	e000      	b.n	8002558 <HAL_DMA_IRQHandler+0xb0>
 8002556:	2304      	movs	r3, #4
 8002558:	4a55      	ldr	r2, [pc, #340]	; (80026b0 <HAL_DMA_IRQHandler+0x208>)
 800255a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 8094 	beq.w	800268e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800256e:	e08e      	b.n	800268e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	2202      	movs	r2, #2
 8002576:	409a      	lsls	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d056      	beq.n	800262e <HAL_DMA_IRQHandler+0x186>
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d051      	beq.n	800262e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0320 	and.w	r3, r3, #32
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10b      	bne.n	80025b0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 020a 	bic.w	r2, r2, #10
 80025a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a38      	ldr	r2, [pc, #224]	; (8002698 <HAL_DMA_IRQHandler+0x1f0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d029      	beq.n	800260e <HAL_DMA_IRQHandler+0x166>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a37      	ldr	r2, [pc, #220]	; (800269c <HAL_DMA_IRQHandler+0x1f4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d022      	beq.n	800260a <HAL_DMA_IRQHandler+0x162>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a35      	ldr	r2, [pc, #212]	; (80026a0 <HAL_DMA_IRQHandler+0x1f8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01a      	beq.n	8002604 <HAL_DMA_IRQHandler+0x15c>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a34      	ldr	r2, [pc, #208]	; (80026a4 <HAL_DMA_IRQHandler+0x1fc>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d012      	beq.n	80025fe <HAL_DMA_IRQHandler+0x156>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a32      	ldr	r2, [pc, #200]	; (80026a8 <HAL_DMA_IRQHandler+0x200>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00a      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x150>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a31      	ldr	r2, [pc, #196]	; (80026ac <HAL_DMA_IRQHandler+0x204>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d102      	bne.n	80025f2 <HAL_DMA_IRQHandler+0x14a>
 80025ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025f0:	e00e      	b.n	8002610 <HAL_DMA_IRQHandler+0x168>
 80025f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025f6:	e00b      	b.n	8002610 <HAL_DMA_IRQHandler+0x168>
 80025f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025fc:	e008      	b.n	8002610 <HAL_DMA_IRQHandler+0x168>
 80025fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002602:	e005      	b.n	8002610 <HAL_DMA_IRQHandler+0x168>
 8002604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002608:	e002      	b.n	8002610 <HAL_DMA_IRQHandler+0x168>
 800260a:	2320      	movs	r3, #32
 800260c:	e000      	b.n	8002610 <HAL_DMA_IRQHandler+0x168>
 800260e:	2302      	movs	r3, #2
 8002610:	4a27      	ldr	r2, [pc, #156]	; (80026b0 <HAL_DMA_IRQHandler+0x208>)
 8002612:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	2b00      	cmp	r3, #0
 8002622:	d034      	beq.n	800268e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800262c:	e02f      	b.n	800268e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	2208      	movs	r2, #8
 8002634:	409a      	lsls	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4013      	ands	r3, r2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d028      	beq.n	8002690 <HAL_DMA_IRQHandler+0x1e8>
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d023      	beq.n	8002690 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 020e 	bic.w	r2, r2, #14
 8002656:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002660:	2101      	movs	r1, #1
 8002662:	fa01 f202 	lsl.w	r2, r1, r2
 8002666:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	2b00      	cmp	r3, #0
 8002684:	d004      	beq.n	8002690 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	4798      	blx	r3
    }
  }
  return;
 800268e:	bf00      	nop
 8002690:	bf00      	nop
}
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40020008 	.word	0x40020008
 800269c:	4002001c 	.word	0x4002001c
 80026a0:	40020030 	.word	0x40020030
 80026a4:	40020044 	.word	0x40020044
 80026a8:	40020058 	.word	0x40020058
 80026ac:	4002006c 	.word	0x4002006c
 80026b0:	40020000 	.word	0x40020000

080026b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
 80026c0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ca:	2101      	movs	r1, #1
 80026cc:	fa01 f202 	lsl.w	r2, r1, r2
 80026d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b10      	cmp	r3, #16
 80026e0:	d108      	bne.n	80026f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026f2:	e007      	b.n	8002704 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	60da      	str	r2, [r3, #12]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
	...

08002710 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002710:	b480      	push	{r7}
 8002712:	b08b      	sub	sp, #44	; 0x2c
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800271a:	2300      	movs	r3, #0
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800271e:	2300      	movs	r3, #0
 8002720:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002722:	e161      	b.n	80029e8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002724:	2201      	movs	r2, #1
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	429a      	cmp	r2, r3
 800273e:	f040 8150 	bne.w	80029e2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4a97      	ldr	r2, [pc, #604]	; (80029a4 <HAL_GPIO_Init+0x294>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d05e      	beq.n	800280a <HAL_GPIO_Init+0xfa>
 800274c:	4a95      	ldr	r2, [pc, #596]	; (80029a4 <HAL_GPIO_Init+0x294>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d875      	bhi.n	800283e <HAL_GPIO_Init+0x12e>
 8002752:	4a95      	ldr	r2, [pc, #596]	; (80029a8 <HAL_GPIO_Init+0x298>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d058      	beq.n	800280a <HAL_GPIO_Init+0xfa>
 8002758:	4a93      	ldr	r2, [pc, #588]	; (80029a8 <HAL_GPIO_Init+0x298>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d86f      	bhi.n	800283e <HAL_GPIO_Init+0x12e>
 800275e:	4a93      	ldr	r2, [pc, #588]	; (80029ac <HAL_GPIO_Init+0x29c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d052      	beq.n	800280a <HAL_GPIO_Init+0xfa>
 8002764:	4a91      	ldr	r2, [pc, #580]	; (80029ac <HAL_GPIO_Init+0x29c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d869      	bhi.n	800283e <HAL_GPIO_Init+0x12e>
 800276a:	4a91      	ldr	r2, [pc, #580]	; (80029b0 <HAL_GPIO_Init+0x2a0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d04c      	beq.n	800280a <HAL_GPIO_Init+0xfa>
 8002770:	4a8f      	ldr	r2, [pc, #572]	; (80029b0 <HAL_GPIO_Init+0x2a0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d863      	bhi.n	800283e <HAL_GPIO_Init+0x12e>
 8002776:	4a8f      	ldr	r2, [pc, #572]	; (80029b4 <HAL_GPIO_Init+0x2a4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d046      	beq.n	800280a <HAL_GPIO_Init+0xfa>
 800277c:	4a8d      	ldr	r2, [pc, #564]	; (80029b4 <HAL_GPIO_Init+0x2a4>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d85d      	bhi.n	800283e <HAL_GPIO_Init+0x12e>
 8002782:	2b12      	cmp	r3, #18
 8002784:	d82a      	bhi.n	80027dc <HAL_GPIO_Init+0xcc>
 8002786:	2b12      	cmp	r3, #18
 8002788:	d859      	bhi.n	800283e <HAL_GPIO_Init+0x12e>
 800278a:	a201      	add	r2, pc, #4	; (adr r2, 8002790 <HAL_GPIO_Init+0x80>)
 800278c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002790:	0800280b 	.word	0x0800280b
 8002794:	080027e5 	.word	0x080027e5
 8002798:	080027f7 	.word	0x080027f7
 800279c:	08002839 	.word	0x08002839
 80027a0:	0800283f 	.word	0x0800283f
 80027a4:	0800283f 	.word	0x0800283f
 80027a8:	0800283f 	.word	0x0800283f
 80027ac:	0800283f 	.word	0x0800283f
 80027b0:	0800283f 	.word	0x0800283f
 80027b4:	0800283f 	.word	0x0800283f
 80027b8:	0800283f 	.word	0x0800283f
 80027bc:	0800283f 	.word	0x0800283f
 80027c0:	0800283f 	.word	0x0800283f
 80027c4:	0800283f 	.word	0x0800283f
 80027c8:	0800283f 	.word	0x0800283f
 80027cc:	0800283f 	.word	0x0800283f
 80027d0:	0800283f 	.word	0x0800283f
 80027d4:	080027ed 	.word	0x080027ed
 80027d8:	08002801 	.word	0x08002801
 80027dc:	4a76      	ldr	r2, [pc, #472]	; (80029b8 <HAL_GPIO_Init+0x2a8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d013      	beq.n	800280a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027e2:	e02c      	b.n	800283e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	623b      	str	r3, [r7, #32]
          break;
 80027ea:	e029      	b.n	8002840 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	3304      	adds	r3, #4
 80027f2:	623b      	str	r3, [r7, #32]
          break;
 80027f4:	e024      	b.n	8002840 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	3308      	adds	r3, #8
 80027fc:	623b      	str	r3, [r7, #32]
          break;
 80027fe:	e01f      	b.n	8002840 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	330c      	adds	r3, #12
 8002806:	623b      	str	r3, [r7, #32]
          break;
 8002808:	e01a      	b.n	8002840 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d102      	bne.n	8002818 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002812:	2304      	movs	r3, #4
 8002814:	623b      	str	r3, [r7, #32]
          break;
 8002816:	e013      	b.n	8002840 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d105      	bne.n	800282c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002820:	2308      	movs	r3, #8
 8002822:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	611a      	str	r2, [r3, #16]
          break;
 800282a:	e009      	b.n	8002840 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800282c:	2308      	movs	r3, #8
 800282e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	69fa      	ldr	r2, [r7, #28]
 8002834:	615a      	str	r2, [r3, #20]
          break;
 8002836:	e003      	b.n	8002840 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002838:	2300      	movs	r3, #0
 800283a:	623b      	str	r3, [r7, #32]
          break;
 800283c:	e000      	b.n	8002840 <HAL_GPIO_Init+0x130>
          break;
 800283e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2bff      	cmp	r3, #255	; 0xff
 8002844:	d801      	bhi.n	800284a <HAL_GPIO_Init+0x13a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	e001      	b.n	800284e <HAL_GPIO_Init+0x13e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3304      	adds	r3, #4
 800284e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	2bff      	cmp	r3, #255	; 0xff
 8002854:	d802      	bhi.n	800285c <HAL_GPIO_Init+0x14c>
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	e002      	b.n	8002862 <HAL_GPIO_Init+0x152>
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	3b08      	subs	r3, #8
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	210f      	movs	r1, #15
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	401a      	ands	r2, r3
 8002874:	6a39      	ldr	r1, [r7, #32]
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	fa01 f303 	lsl.w	r3, r1, r3
 800287c:	431a      	orrs	r2, r3
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 80a9 	beq.w	80029e2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002890:	4b4a      	ldr	r3, [pc, #296]	; (80029bc <HAL_GPIO_Init+0x2ac>)
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	4a49      	ldr	r2, [pc, #292]	; (80029bc <HAL_GPIO_Init+0x2ac>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	6193      	str	r3, [r2, #24]
 800289c:	4b47      	ldr	r3, [pc, #284]	; (80029bc <HAL_GPIO_Init+0x2ac>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028a8:	4a45      	ldr	r2, [pc, #276]	; (80029c0 <HAL_GPIO_Init+0x2b0>)
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	089b      	lsrs	r3, r3, #2
 80028ae:	3302      	adds	r3, #2
 80028b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	220f      	movs	r2, #15
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4013      	ands	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a3d      	ldr	r2, [pc, #244]	; (80029c4 <HAL_GPIO_Init+0x2b4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00d      	beq.n	80028f0 <HAL_GPIO_Init+0x1e0>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a3c      	ldr	r2, [pc, #240]	; (80029c8 <HAL_GPIO_Init+0x2b8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d007      	beq.n	80028ec <HAL_GPIO_Init+0x1dc>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a3b      	ldr	r2, [pc, #236]	; (80029cc <HAL_GPIO_Init+0x2bc>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d101      	bne.n	80028e8 <HAL_GPIO_Init+0x1d8>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e004      	b.n	80028f2 <HAL_GPIO_Init+0x1e2>
 80028e8:	2303      	movs	r3, #3
 80028ea:	e002      	b.n	80028f2 <HAL_GPIO_Init+0x1e2>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <HAL_GPIO_Init+0x1e2>
 80028f0:	2300      	movs	r3, #0
 80028f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f4:	f002 0203 	and.w	r2, r2, #3
 80028f8:	0092      	lsls	r2, r2, #2
 80028fa:	4093      	lsls	r3, r2
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002902:	492f      	ldr	r1, [pc, #188]	; (80029c0 <HAL_GPIO_Init+0x2b0>)
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	089b      	lsrs	r3, r3, #2
 8002908:	3302      	adds	r3, #2
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d006      	beq.n	800292a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800291c:	4b2c      	ldr	r3, [pc, #176]	; (80029d0 <HAL_GPIO_Init+0x2c0>)
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	492b      	ldr	r1, [pc, #172]	; (80029d0 <HAL_GPIO_Init+0x2c0>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	608b      	str	r3, [r1, #8]
 8002928:	e006      	b.n	8002938 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800292a:	4b29      	ldr	r3, [pc, #164]	; (80029d0 <HAL_GPIO_Init+0x2c0>)
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	43db      	mvns	r3, r3
 8002932:	4927      	ldr	r1, [pc, #156]	; (80029d0 <HAL_GPIO_Init+0x2c0>)
 8002934:	4013      	ands	r3, r2
 8002936:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d006      	beq.n	8002952 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002944:	4b22      	ldr	r3, [pc, #136]	; (80029d0 <HAL_GPIO_Init+0x2c0>)
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	4921      	ldr	r1, [pc, #132]	; (80029d0 <HAL_GPIO_Init+0x2c0>)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	60cb      	str	r3, [r1, #12]
 8002950:	e006      	b.n	8002960 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002952:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <HAL_GPIO_Init+0x2c0>)
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	43db      	mvns	r3, r3
 800295a:	491d      	ldr	r1, [pc, #116]	; (80029d0 <HAL_GPIO_Init+0x2c0>)
 800295c:	4013      	ands	r3, r2
 800295e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d006      	beq.n	800297a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800296c:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <HAL_GPIO_Init+0x2c0>)
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	4917      	ldr	r1, [pc, #92]	; (80029d0 <HAL_GPIO_Init+0x2c0>)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
 8002978:	e006      	b.n	8002988 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800297a:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <HAL_GPIO_Init+0x2c0>)
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	43db      	mvns	r3, r3
 8002982:	4913      	ldr	r1, [pc, #76]	; (80029d0 <HAL_GPIO_Init+0x2c0>)
 8002984:	4013      	ands	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01f      	beq.n	80029d4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002994:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <HAL_GPIO_Init+0x2c0>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	490d      	ldr	r1, [pc, #52]	; (80029d0 <HAL_GPIO_Init+0x2c0>)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	600b      	str	r3, [r1, #0]
 80029a0:	e01f      	b.n	80029e2 <HAL_GPIO_Init+0x2d2>
 80029a2:	bf00      	nop
 80029a4:	10320000 	.word	0x10320000
 80029a8:	10310000 	.word	0x10310000
 80029ac:	10220000 	.word	0x10220000
 80029b0:	10210000 	.word	0x10210000
 80029b4:	10120000 	.word	0x10120000
 80029b8:	10110000 	.word	0x10110000
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40010000 	.word	0x40010000
 80029c4:	40010800 	.word	0x40010800
 80029c8:	40010c00 	.word	0x40010c00
 80029cc:	40011000 	.word	0x40011000
 80029d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_GPIO_Init+0x2f4>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	43db      	mvns	r3, r3
 80029dc:	4909      	ldr	r1, [pc, #36]	; (8002a04 <HAL_GPIO_Init+0x2f4>)
 80029de:	4013      	ands	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	3301      	adds	r3, #1
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	fa22 f303 	lsr.w	r3, r2, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f47f ae96 	bne.w	8002724 <HAL_GPIO_Init+0x14>
  }
}
 80029f8:	bf00      	nop
 80029fa:	bf00      	nop
 80029fc:	372c      	adds	r7, #44	; 0x2c
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr
 8002a04:	40010400 	.word	0x40010400

08002a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	807b      	strh	r3, [r7, #2]
 8002a14:	4613      	mov	r3, r2
 8002a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a18:	787b      	ldrb	r3, [r7, #1]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a1e:	887a      	ldrh	r2, [r7, #2]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a24:	e003      	b.n	8002a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a26:	887b      	ldrh	r3, [r7, #2]
 8002a28:	041a      	lsls	r2, r3, #16
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	611a      	str	r2, [r3, #16]
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a4a:	887a      	ldrh	r2, [r7, #2]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	041a      	lsls	r2, r3, #16
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	43d9      	mvns	r1, r3
 8002a56:	887b      	ldrh	r3, [r7, #2]
 8002a58:	400b      	ands	r3, r1
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	611a      	str	r2, [r3, #16]
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e272      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8087 	beq.w	8002b9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a8c:	4b92      	ldr	r3, [pc, #584]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 030c 	and.w	r3, r3, #12
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d00c      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a98:	4b8f      	ldr	r3, [pc, #572]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 030c 	and.w	r3, r3, #12
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d112      	bne.n	8002aca <HAL_RCC_OscConfig+0x5e>
 8002aa4:	4b8c      	ldr	r3, [pc, #560]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab0:	d10b      	bne.n	8002aca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab2:	4b89      	ldr	r3, [pc, #548]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d06c      	beq.n	8002b98 <HAL_RCC_OscConfig+0x12c>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d168      	bne.n	8002b98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e24c      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad2:	d106      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x76>
 8002ad4:	4b80      	ldr	r3, [pc, #512]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a7f      	ldr	r2, [pc, #508]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	e02e      	b.n	8002b40 <HAL_RCC_OscConfig+0xd4>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCC_OscConfig+0x98>
 8002aea:	4b7b      	ldr	r3, [pc, #492]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a7a      	ldr	r2, [pc, #488]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	4b78      	ldr	r3, [pc, #480]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a77      	ldr	r2, [pc, #476]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e01d      	b.n	8002b40 <HAL_RCC_OscConfig+0xd4>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCC_OscConfig+0xbc>
 8002b0e:	4b72      	ldr	r3, [pc, #456]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a71      	ldr	r2, [pc, #452]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	4b6f      	ldr	r3, [pc, #444]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a6e      	ldr	r2, [pc, #440]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e00b      	b.n	8002b40 <HAL_RCC_OscConfig+0xd4>
 8002b28:	4b6b      	ldr	r3, [pc, #428]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a6a      	ldr	r2, [pc, #424]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	4b68      	ldr	r3, [pc, #416]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a67      	ldr	r2, [pc, #412]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d013      	beq.n	8002b70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b48:	f7fe f86a 	bl	8000c20 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b50:	f7fe f866 	bl	8000c20 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	; 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e200      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b62:	4b5d      	ldr	r3, [pc, #372]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0xe4>
 8002b6e:	e014      	b.n	8002b9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fe f856 	bl	8000c20 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b78:	f7fe f852 	bl	8000c20 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e1ec      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8a:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x10c>
 8002b96:	e000      	b.n	8002b9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d063      	beq.n	8002c6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ba6:	4b4c      	ldr	r3, [pc, #304]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00b      	beq.n	8002bca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bb2:	4b49      	ldr	r3, [pc, #292]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d11c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x18c>
 8002bbe:	4b46      	ldr	r3, [pc, #280]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d116      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bca:	4b43      	ldr	r3, [pc, #268]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <HAL_RCC_OscConfig+0x176>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d001      	beq.n	8002be2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e1c0      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be2:	4b3d      	ldr	r3, [pc, #244]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4939      	ldr	r1, [pc, #228]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf6:	e03a      	b.n	8002c6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d020      	beq.n	8002c42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c00:	4b36      	ldr	r3, [pc, #216]	; (8002cdc <HAL_RCC_OscConfig+0x270>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c06:	f7fe f80b 	bl	8000c20 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c0e:	f7fe f807 	bl	8000c20 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e1a1      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c20:	4b2d      	ldr	r3, [pc, #180]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2c:	4b2a      	ldr	r3, [pc, #168]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4927      	ldr	r1, [pc, #156]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	600b      	str	r3, [r1, #0]
 8002c40:	e015      	b.n	8002c6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c42:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <HAL_RCC_OscConfig+0x270>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7fd ffea 	bl	8000c20 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c50:	f7fd ffe6 	bl	8000c20 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e180      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c62:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d03a      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d019      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c82:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c88:	f7fd ffca 	bl	8000c20 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c90:	f7fd ffc6 	bl	8000c20 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e160      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cae:	2001      	movs	r0, #1
 8002cb0:	f000 face 	bl	8003250 <RCC_Delay>
 8002cb4:	e01c      	b.n	8002cf0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbc:	f7fd ffb0 	bl	8000c20 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc2:	e00f      	b.n	8002ce4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc4:	f7fd ffac 	bl	8000c20 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d908      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e146      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	42420000 	.word	0x42420000
 8002ce0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce4:	4b92      	ldr	r3, [pc, #584]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1e9      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80a6 	beq.w	8002e4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d02:	4b8b      	ldr	r3, [pc, #556]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10d      	bne.n	8002d2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d0e:	4b88      	ldr	r3, [pc, #544]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	4a87      	ldr	r2, [pc, #540]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d18:	61d3      	str	r3, [r2, #28]
 8002d1a:	4b85      	ldr	r3, [pc, #532]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d26:	2301      	movs	r3, #1
 8002d28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2a:	4b82      	ldr	r3, [pc, #520]	; (8002f34 <HAL_RCC_OscConfig+0x4c8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d118      	bne.n	8002d68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d36:	4b7f      	ldr	r3, [pc, #508]	; (8002f34 <HAL_RCC_OscConfig+0x4c8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a7e      	ldr	r2, [pc, #504]	; (8002f34 <HAL_RCC_OscConfig+0x4c8>)
 8002d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d42:	f7fd ff6d 	bl	8000c20 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4a:	f7fd ff69 	bl	8000c20 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b64      	cmp	r3, #100	; 0x64
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e103      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5c:	4b75      	ldr	r3, [pc, #468]	; (8002f34 <HAL_RCC_OscConfig+0x4c8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d106      	bne.n	8002d7e <HAL_RCC_OscConfig+0x312>
 8002d70:	4b6f      	ldr	r3, [pc, #444]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	4a6e      	ldr	r2, [pc, #440]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6213      	str	r3, [r2, #32]
 8002d7c:	e02d      	b.n	8002dda <HAL_RCC_OscConfig+0x36e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x334>
 8002d86:	4b6a      	ldr	r3, [pc, #424]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	4a69      	ldr	r2, [pc, #420]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	f023 0301 	bic.w	r3, r3, #1
 8002d90:	6213      	str	r3, [r2, #32]
 8002d92:	4b67      	ldr	r3, [pc, #412]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	4a66      	ldr	r2, [pc, #408]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	f023 0304 	bic.w	r3, r3, #4
 8002d9c:	6213      	str	r3, [r2, #32]
 8002d9e:	e01c      	b.n	8002dda <HAL_RCC_OscConfig+0x36e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d10c      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x356>
 8002da8:	4b61      	ldr	r3, [pc, #388]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	4a60      	ldr	r2, [pc, #384]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002dae:	f043 0304 	orr.w	r3, r3, #4
 8002db2:	6213      	str	r3, [r2, #32]
 8002db4:	4b5e      	ldr	r3, [pc, #376]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	4a5d      	ldr	r2, [pc, #372]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6213      	str	r3, [r2, #32]
 8002dc0:	e00b      	b.n	8002dda <HAL_RCC_OscConfig+0x36e>
 8002dc2:	4b5b      	ldr	r3, [pc, #364]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	4a5a      	ldr	r2, [pc, #360]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	6213      	str	r3, [r2, #32]
 8002dce:	4b58      	ldr	r3, [pc, #352]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	4a57      	ldr	r2, [pc, #348]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	f023 0304 	bic.w	r3, r3, #4
 8002dd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d015      	beq.n	8002e0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de2:	f7fd ff1d 	bl	8000c20 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de8:	e00a      	b.n	8002e00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dea:	f7fd ff19 	bl	8000c20 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e0b1      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e00:	4b4b      	ldr	r3, [pc, #300]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0ee      	beq.n	8002dea <HAL_RCC_OscConfig+0x37e>
 8002e0c:	e014      	b.n	8002e38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0e:	f7fd ff07 	bl	8000c20 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e16:	f7fd ff03 	bl	8000c20 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e09b      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e2c:	4b40      	ldr	r3, [pc, #256]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ee      	bne.n	8002e16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e38:	7dfb      	ldrb	r3, [r7, #23]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d105      	bne.n	8002e4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e3e:	4b3c      	ldr	r3, [pc, #240]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	4a3b      	ldr	r2, [pc, #236]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 8087 	beq.w	8002f62 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e54:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d061      	beq.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d146      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e68:	4b33      	ldr	r3, [pc, #204]	; (8002f38 <HAL_RCC_OscConfig+0x4cc>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7fd fed7 	bl	8000c20 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e76:	f7fd fed3 	bl	8000c20 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e06d      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e88:	4b29      	ldr	r3, [pc, #164]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f0      	bne.n	8002e76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9c:	d108      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e9e:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	4921      	ldr	r1, [pc, #132]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb0:	4b1f      	ldr	r3, [pc, #124]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a19      	ldr	r1, [r3, #32]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	491b      	ldr	r1, [pc, #108]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	; (8002f38 <HAL_RCC_OscConfig+0x4cc>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ece:	f7fd fea7 	bl	8000c20 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed6:	f7fd fea3 	bl	8000c20 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e03d      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ee8:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x46a>
 8002ef4:	e035      	b.n	8002f62 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <HAL_RCC_OscConfig+0x4cc>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efc:	f7fd fe90 	bl	8000c20 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f04:	f7fd fe8c 	bl	8000c20 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e026      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x498>
 8002f22:	e01e      	b.n	8002f62 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d107      	bne.n	8002f3c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e019      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40007000 	.word	0x40007000
 8002f38:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <HAL_RCC_OscConfig+0x500>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d106      	bne.n	8002f5e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d001      	beq.n	8002f62 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40021000 	.word	0x40021000

08002f70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0d0      	b.n	8003126 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f84:	4b6a      	ldr	r3, [pc, #424]	; (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d910      	bls.n	8002fb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b67      	ldr	r3, [pc, #412]	; (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 0207 	bic.w	r2, r3, #7
 8002f9a:	4965      	ldr	r1, [pc, #404]	; (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b63      	ldr	r3, [pc, #396]	; (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0b8      	b.n	8003126 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d020      	beq.n	8003002 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fcc:	4b59      	ldr	r3, [pc, #356]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4a58      	ldr	r2, [pc, #352]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fe4:	4b53      	ldr	r3, [pc, #332]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4a52      	ldr	r2, [pc, #328]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff0:	4b50      	ldr	r3, [pc, #320]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	494d      	ldr	r1, [pc, #308]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d040      	beq.n	8003090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d107      	bne.n	8003026 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003016:	4b47      	ldr	r3, [pc, #284]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d115      	bne.n	800304e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e07f      	b.n	8003126 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d107      	bne.n	800303e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302e:	4b41      	ldr	r3, [pc, #260]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d109      	bne.n	800304e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e073      	b.n	8003126 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303e:	4b3d      	ldr	r3, [pc, #244]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e06b      	b.n	8003126 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800304e:	4b39      	ldr	r3, [pc, #228]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f023 0203 	bic.w	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4936      	ldr	r1, [pc, #216]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 800305c:	4313      	orrs	r3, r2
 800305e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003060:	f7fd fdde 	bl	8000c20 <HAL_GetTick>
 8003064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003066:	e00a      	b.n	800307e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003068:	f7fd fdda 	bl	8000c20 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	; 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e053      	b.n	8003126 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307e:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 020c 	and.w	r2, r3, #12
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	429a      	cmp	r2, r3
 800308e:	d1eb      	bne.n	8003068 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003090:	4b27      	ldr	r3, [pc, #156]	; (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d210      	bcs.n	80030c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309e:	4b24      	ldr	r3, [pc, #144]	; (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 0207 	bic.w	r2, r3, #7
 80030a6:	4922      	ldr	r1, [pc, #136]	; (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ae:	4b20      	ldr	r3, [pc, #128]	; (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e032      	b.n	8003126 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030cc:	4b19      	ldr	r3, [pc, #100]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4916      	ldr	r1, [pc, #88]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d009      	beq.n	80030fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ea:	4b12      	ldr	r3, [pc, #72]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	490e      	ldr	r1, [pc, #56]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030fe:	f000 f821 	bl	8003144 <HAL_RCC_GetSysClockFreq>
 8003102:	4602      	mov	r2, r0
 8003104:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	091b      	lsrs	r3, r3, #4
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	490a      	ldr	r1, [pc, #40]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8003110:	5ccb      	ldrb	r3, [r1, r3]
 8003112:	fa22 f303 	lsr.w	r3, r2, r3
 8003116:	4a09      	ldr	r2, [pc, #36]	; (800313c <HAL_RCC_ClockConfig+0x1cc>)
 8003118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <HAL_RCC_ClockConfig+0x1d0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd fd3c 	bl	8000b9c <HAL_InitTick>

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40022000 	.word	0x40022000
 8003134:	40021000 	.word	0x40021000
 8003138:	0800441c 	.word	0x0800441c
 800313c:	20000000 	.word	0x20000000
 8003140:	20000004 	.word	0x20000004

08003144 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003144:	b480      	push	{r7}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	2300      	movs	r3, #0
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	2300      	movs	r3, #0
 8003158:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800315e:	4b1e      	ldr	r3, [pc, #120]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 030c 	and.w	r3, r3, #12
 800316a:	2b04      	cmp	r3, #4
 800316c:	d002      	beq.n	8003174 <HAL_RCC_GetSysClockFreq+0x30>
 800316e:	2b08      	cmp	r3, #8
 8003170:	d003      	beq.n	800317a <HAL_RCC_GetSysClockFreq+0x36>
 8003172:	e027      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003174:	4b19      	ldr	r3, [pc, #100]	; (80031dc <HAL_RCC_GetSysClockFreq+0x98>)
 8003176:	613b      	str	r3, [r7, #16]
      break;
 8003178:	e027      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	0c9b      	lsrs	r3, r3, #18
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	4a17      	ldr	r2, [pc, #92]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003184:	5cd3      	ldrb	r3, [r2, r3]
 8003186:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d010      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003192:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	0c5b      	lsrs	r3, r3, #17
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	4a11      	ldr	r2, [pc, #68]	; (80031e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800319e:	5cd3      	ldrb	r3, [r2, r3]
 80031a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a0d      	ldr	r2, [pc, #52]	; (80031dc <HAL_RCC_GetSysClockFreq+0x98>)
 80031a6:	fb03 f202 	mul.w	r2, r3, r2
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	e004      	b.n	80031be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a0c      	ldr	r2, [pc, #48]	; (80031e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031b8:	fb02 f303 	mul.w	r3, r2, r3
 80031bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	613b      	str	r3, [r7, #16]
      break;
 80031c2:	e002      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <HAL_RCC_GetSysClockFreq+0x98>)
 80031c6:	613b      	str	r3, [r7, #16]
      break;
 80031c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ca:	693b      	ldr	r3, [r7, #16]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	371c      	adds	r7, #28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40021000 	.word	0x40021000
 80031dc:	007a1200 	.word	0x007a1200
 80031e0:	08004434 	.word	0x08004434
 80031e4:	08004444 	.word	0x08004444
 80031e8:	003d0900 	.word	0x003d0900

080031ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f0:	4b02      	ldr	r3, [pc, #8]	; (80031fc <HAL_RCC_GetHCLKFreq+0x10>)
 80031f2:	681b      	ldr	r3, [r3, #0]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr
 80031fc:	20000000 	.word	0x20000000

08003200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003204:	f7ff fff2 	bl	80031ec <HAL_RCC_GetHCLKFreq>
 8003208:	4602      	mov	r2, r0
 800320a:	4b05      	ldr	r3, [pc, #20]	; (8003220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	0a1b      	lsrs	r3, r3, #8
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	4903      	ldr	r1, [pc, #12]	; (8003224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003216:	5ccb      	ldrb	r3, [r1, r3]
 8003218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800321c:	4618      	mov	r0, r3
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40021000 	.word	0x40021000
 8003224:	0800442c 	.word	0x0800442c

08003228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800322c:	f7ff ffde 	bl	80031ec <HAL_RCC_GetHCLKFreq>
 8003230:	4602      	mov	r2, r0
 8003232:	4b05      	ldr	r3, [pc, #20]	; (8003248 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	0adb      	lsrs	r3, r3, #11
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	4903      	ldr	r1, [pc, #12]	; (800324c <HAL_RCC_GetPCLK2Freq+0x24>)
 800323e:	5ccb      	ldrb	r3, [r1, r3]
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003244:	4618      	mov	r0, r3
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40021000 	.word	0x40021000
 800324c:	0800442c 	.word	0x0800442c

08003250 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003258:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <RCC_Delay+0x34>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <RCC_Delay+0x38>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	0a5b      	lsrs	r3, r3, #9
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800326c:	bf00      	nop
  }
  while (Delay --);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1e5a      	subs	r2, r3, #1
 8003272:	60fa      	str	r2, [r7, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f9      	bne.n	800326c <RCC_Delay+0x1c>
}
 8003278:	bf00      	nop
 800327a:	bf00      	nop
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	20000000 	.word	0x20000000
 8003288:	10624dd3 	.word	0x10624dd3

0800328c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d07d      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80032a8:	2300      	movs	r3, #0
 80032aa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ac:	4b4f      	ldr	r3, [pc, #316]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10d      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b8:	4b4c      	ldr	r3, [pc, #304]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	4a4b      	ldr	r2, [pc, #300]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c2:	61d3      	str	r3, [r2, #28]
 80032c4:	4b49      	ldr	r3, [pc, #292]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d0:	2301      	movs	r3, #1
 80032d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d4:	4b46      	ldr	r3, [pc, #280]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d118      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e0:	4b43      	ldr	r3, [pc, #268]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a42      	ldr	r2, [pc, #264]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ec:	f7fd fc98 	bl	8000c20 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f2:	e008      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f4:	f7fd fc94 	bl	8000c20 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	; 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e06d      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003306:	4b3a      	ldr	r3, [pc, #232]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003312:	4b36      	ldr	r3, [pc, #216]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d02e      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	429a      	cmp	r2, r3
 800332e:	d027      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003330:	4b2e      	ldr	r3, [pc, #184]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003338:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800333a:	4b2e      	ldr	r3, [pc, #184]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800333c:	2201      	movs	r2, #1
 800333e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003340:	4b2c      	ldr	r3, [pc, #176]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003346:	4a29      	ldr	r2, [pc, #164]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d014      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003356:	f7fd fc63 	bl	8000c20 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335c:	e00a      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335e:	f7fd fc5f 	bl	8000c20 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	f241 3288 	movw	r2, #5000	; 0x1388
 800336c:	4293      	cmp	r3, r2
 800336e:	d901      	bls.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e036      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003374:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0ee      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003380:	4b1a      	ldr	r3, [pc, #104]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	4917      	ldr	r1, [pc, #92]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338e:	4313      	orrs	r3, r2
 8003390:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003392:	7dfb      	ldrb	r3, [r7, #23]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d105      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003398:	4b14      	ldr	r3, [pc, #80]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	4a13      	ldr	r2, [pc, #76]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033b0:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	490b      	ldr	r1, [pc, #44]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0310 	and.w	r3, r3, #16
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d008      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033ce:	4b07      	ldr	r3, [pc, #28]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	4904      	ldr	r1, [pc, #16]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40007000 	.word	0x40007000
 80033f4:	42420440 	.word	0x42420440

080033f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b088      	sub	sp, #32
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	2300      	movs	r3, #0
 8003406:	61fb      	str	r3, [r7, #28]
 8003408:	2300      	movs	r3, #0
 800340a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	2300      	movs	r3, #0
 8003412:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b10      	cmp	r3, #16
 8003418:	d00a      	beq.n	8003430 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b10      	cmp	r3, #16
 800341e:	f200 808a 	bhi.w	8003536 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d045      	beq.n	80034b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d075      	beq.n	800351a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800342e:	e082      	b.n	8003536 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003430:	4b46      	ldr	r3, [pc, #280]	; (800354c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003436:	4b45      	ldr	r3, [pc, #276]	; (800354c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d07b      	beq.n	800353a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	0c9b      	lsrs	r3, r3, #18
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	4a41      	ldr	r2, [pc, #260]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800344c:	5cd3      	ldrb	r3, [r2, r3]
 800344e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d015      	beq.n	8003486 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800345a:	4b3c      	ldr	r3, [pc, #240]	; (800354c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	0c5b      	lsrs	r3, r3, #17
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	4a3b      	ldr	r2, [pc, #236]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003466:	5cd3      	ldrb	r3, [r2, r3]
 8003468:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00d      	beq.n	8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003474:	4a38      	ldr	r2, [pc, #224]	; (8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	fbb2 f2f3 	udiv	r2, r2, r3
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	fb02 f303 	mul.w	r3, r2, r3
 8003482:	61fb      	str	r3, [r7, #28]
 8003484:	e004      	b.n	8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4a34      	ldr	r2, [pc, #208]	; (800355c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800348a:	fb02 f303 	mul.w	r3, r2, r3
 800348e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003490:	4b2e      	ldr	r3, [pc, #184]	; (800354c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800349c:	d102      	bne.n	80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	61bb      	str	r3, [r7, #24]
      break;
 80034a2:	e04a      	b.n	800353a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4a2d      	ldr	r2, [pc, #180]	; (8003560 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	085b      	lsrs	r3, r3, #1
 80034b0:	61bb      	str	r3, [r7, #24]
      break;
 80034b2:	e042      	b.n	800353a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80034b4:	4b25      	ldr	r3, [pc, #148]	; (800354c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034c4:	d108      	bne.n	80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80034d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034d4:	61bb      	str	r3, [r7, #24]
 80034d6:	e01f      	b.n	8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e2:	d109      	bne.n	80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80034e4:	4b19      	ldr	r3, [pc, #100]	; (800354c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80034f0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80034f4:	61bb      	str	r3, [r7, #24]
 80034f6:	e00f      	b.n	8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003502:	d11c      	bne.n	800353e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003504:	4b11      	ldr	r3, [pc, #68]	; (800354c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d016      	beq.n	800353e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003510:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003514:	61bb      	str	r3, [r7, #24]
      break;
 8003516:	e012      	b.n	800353e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003518:	e011      	b.n	800353e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800351a:	f7ff fe85 	bl	8003228 <HAL_RCC_GetPCLK2Freq>
 800351e:	4602      	mov	r2, r0
 8003520:	4b0a      	ldr	r3, [pc, #40]	; (800354c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	0b9b      	lsrs	r3, r3, #14
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	3301      	adds	r3, #1
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003532:	61bb      	str	r3, [r7, #24]
      break;
 8003534:	e004      	b.n	8003540 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003536:	bf00      	nop
 8003538:	e002      	b.n	8003540 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800353a:	bf00      	nop
 800353c:	e000      	b.n	8003540 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800353e:	bf00      	nop
    }
  }
  return (frequency);
 8003540:	69bb      	ldr	r3, [r7, #24]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3720      	adds	r7, #32
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000
 8003550:	08004448 	.word	0x08004448
 8003554:	08004458 	.word	0x08004458
 8003558:	007a1200 	.word	0x007a1200
 800355c:	003d0900 	.word	0x003d0900
 8003560:	aaaaaaab 	.word	0xaaaaaaab

08003564 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e042      	b.n	80035fc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fd fa4c 	bl	8000a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2224      	movs	r2, #36	; 0x24
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fe6d 	bl	8004288 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	4613      	mov	r3, r2
 8003610:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b20      	cmp	r3, #32
 800361c:	d112      	bne.n	8003644 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <HAL_UART_Receive_DMA+0x26>
 8003624:	88fb      	ldrh	r3, [r7, #6]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e00b      	b.n	8003646 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	461a      	mov	r2, r3
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 fbc8 	bl	8003dd0 <UART_Start_Receive_DMA>
 8003640:	4603      	mov	r3, r0
 8003642:	e000      	b.n	8003646 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003644:	2302      	movs	r3, #2
  }
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b0ba      	sub	sp, #232	; 0xe8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003676:	2300      	movs	r3, #0
 8003678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800367c:	2300      	movs	r3, #0
 800367e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800368e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10f      	bne.n	80036b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d009      	beq.n	80036b6 <HAL_UART_IRQHandler+0x66>
 80036a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fd2c 	bl	800410c <UART_Receive_IT>
      return;
 80036b4:	e25b      	b.n	8003b6e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 80de 	beq.w	800387c <HAL_UART_IRQHandler+0x22c>
 80036c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d106      	bne.n	80036da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 80d1 	beq.w	800387c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00b      	beq.n	80036fe <HAL_UART_IRQHandler+0xae>
 80036e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	f043 0201 	orr.w	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00b      	beq.n	8003722 <HAL_UART_IRQHandler+0xd2>
 800370a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	f043 0202 	orr.w	r2, r3, #2
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00b      	beq.n	8003746 <HAL_UART_IRQHandler+0xf6>
 800372e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	f043 0204 	orr.w	r2, r3, #4
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d011      	beq.n	8003776 <HAL_UART_IRQHandler+0x126>
 8003752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	d105      	bne.n	800376a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800375e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	f043 0208 	orr.w	r2, r3, #8
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 81f2 	beq.w	8003b64 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_UART_IRQHandler+0x14e>
 800378c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 fcb7 	bl	800410c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf14      	ite	ne
 80037ac:	2301      	movne	r3, #1
 80037ae:	2300      	moveq	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d103      	bne.n	80037ca <HAL_UART_IRQHandler+0x17a>
 80037c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d04f      	beq.n	800386a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fbc1 	bl	8003f52 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d041      	beq.n	8003862 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3314      	adds	r3, #20
 80037e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037ec:	e853 3f00 	ldrex	r3, [r3]
 80037f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3314      	adds	r3, #20
 8003806:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800380a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800380e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003812:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003816:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800381a:	e841 2300 	strex	r3, r2, [r1]
 800381e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1d9      	bne.n	80037de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d013      	beq.n	800385a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003836:	4a7e      	ldr	r2, [pc, #504]	; (8003a30 <HAL_UART_IRQHandler+0x3e0>)
 8003838:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383e:	4618      	mov	r0, r3
 8003840:	f7fe fdba 	bl	80023b8 <HAL_DMA_Abort_IT>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d016      	beq.n	8003878 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003854:	4610      	mov	r0, r2
 8003856:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003858:	e00e      	b.n	8003878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f9a5 	bl	8003baa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	e00a      	b.n	8003878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f9a1 	bl	8003baa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003868:	e006      	b.n	8003878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f99d 	bl	8003baa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003876:	e175      	b.n	8003b64 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003878:	bf00      	nop
    return;
 800387a:	e173      	b.n	8003b64 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	2b01      	cmp	r3, #1
 8003882:	f040 814f 	bne.w	8003b24 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800388a:	f003 0310 	and.w	r3, r3, #16
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 8148 	beq.w	8003b24 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 8141 	beq.w	8003b24 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 80b6 	beq.w	8003a34 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8145 	beq.w	8003b68 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038e6:	429a      	cmp	r2, r3
 80038e8:	f080 813e 	bcs.w	8003b68 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	f000 8088 	beq.w	8003a10 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	330c      	adds	r3, #12
 8003906:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800390e:	e853 3f00 	ldrex	r3, [r3]
 8003912:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003916:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800391a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800391e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	330c      	adds	r3, #12
 8003928:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800392c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003930:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003934:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003938:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800393c:	e841 2300 	strex	r3, r2, [r1]
 8003940:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003944:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1d9      	bne.n	8003900 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3314      	adds	r3, #20
 8003952:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003954:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003956:	e853 3f00 	ldrex	r3, [r3]
 800395a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800395c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800395e:	f023 0301 	bic.w	r3, r3, #1
 8003962:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3314      	adds	r3, #20
 800396c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003970:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003974:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003976:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003978:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800397c:	e841 2300 	strex	r3, r2, [r1]
 8003980:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003982:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1e1      	bne.n	800394c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3314      	adds	r3, #20
 800398e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003990:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003992:	e853 3f00 	ldrex	r3, [r3]
 8003996:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800399a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800399e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3314      	adds	r3, #20
 80039a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80039ac:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039b4:	e841 2300 	strex	r3, r2, [r1]
 80039b8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1e3      	bne.n	8003988 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	330c      	adds	r3, #12
 80039d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d8:	e853 3f00 	ldrex	r3, [r3]
 80039dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039e0:	f023 0310 	bic.w	r3, r3, #16
 80039e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	330c      	adds	r3, #12
 80039ee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80039f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80039f4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039fa:	e841 2300 	strex	r3, r2, [r1]
 80039fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1e3      	bne.n	80039ce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe fc98 	bl	8002340 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	4619      	mov	r1, r3
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f8c8 	bl	8003bbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a2c:	e09c      	b.n	8003b68 <HAL_UART_IRQHandler+0x518>
 8003a2e:	bf00      	nop
 8003a30:	08004017 	.word	0x08004017
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 808e 	beq.w	8003b6c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 8089 	beq.w	8003b6c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	330c      	adds	r3, #12
 8003a60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a64:	e853 3f00 	ldrex	r3, [r3]
 8003a68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	330c      	adds	r3, #12
 8003a7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a7e:	647a      	str	r2, [r7, #68]	; 0x44
 8003a80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a86:	e841 2300 	strex	r3, r2, [r1]
 8003a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1e3      	bne.n	8003a5a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3314      	adds	r3, #20
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	e853 3f00 	ldrex	r3, [r3]
 8003aa0:	623b      	str	r3, [r7, #32]
   return(result);
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3314      	adds	r3, #20
 8003ab2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ab6:	633a      	str	r2, [r7, #48]	; 0x30
 8003ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e3      	bne.n	8003a92 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2220      	movs	r2, #32
 8003ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	330c      	adds	r3, #12
 8003ade:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	e853 3f00 	ldrex	r3, [r3]
 8003ae6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0310 	bic.w	r3, r3, #16
 8003aee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	330c      	adds	r3, #12
 8003af8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003afc:	61fa      	str	r2, [r7, #28]
 8003afe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b00:	69b9      	ldr	r1, [r7, #24]
 8003b02:	69fa      	ldr	r2, [r7, #28]
 8003b04:	e841 2300 	strex	r3, r2, [r1]
 8003b08:	617b      	str	r3, [r7, #20]
   return(result);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e3      	bne.n	8003ad8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f84d 	bl	8003bbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b22:	e023      	b.n	8003b6c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d009      	beq.n	8003b44 <HAL_UART_IRQHandler+0x4f4>
 8003b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fa7e 	bl	800403e <UART_Transmit_IT>
    return;
 8003b42:	e014      	b.n	8003b6e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00e      	beq.n	8003b6e <HAL_UART_IRQHandler+0x51e>
 8003b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fabd 	bl	80040dc <UART_EndTransmit_IT>
    return;
 8003b62:	e004      	b.n	8003b6e <HAL_UART_IRQHandler+0x51e>
    return;
 8003b64:	bf00      	nop
 8003b66:	e002      	b.n	8003b6e <HAL_UART_IRQHandler+0x51e>
      return;
 8003b68:	bf00      	nop
 8003b6a:	e000      	b.n	8003b6e <HAL_UART_IRQHandler+0x51e>
      return;
 8003b6c:	bf00      	nop
  }
}
 8003b6e:	37e8      	adds	r7, #232	; 0xe8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bc80      	pop	{r7}
 8003b84:	4770      	bx	lr

08003b86 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr

08003b98 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr

08003baa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr

08003bbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr

08003bd2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b09c      	sub	sp, #112	; 0x70
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d172      	bne.n	8003cd4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	330c      	adds	r3, #12
 8003bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bfe:	e853 3f00 	ldrex	r3, [r3]
 8003c02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	330c      	adds	r3, #12
 8003c12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c14:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c1c:	e841 2300 	strex	r3, r2, [r1]
 8003c20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1e5      	bne.n	8003bf4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3314      	adds	r3, #20
 8003c2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c32:	e853 3f00 	ldrex	r3, [r3]
 8003c36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3a:	f023 0301 	bic.w	r3, r3, #1
 8003c3e:	667b      	str	r3, [r7, #100]	; 0x64
 8003c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3314      	adds	r3, #20
 8003c46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003c48:	647a      	str	r2, [r7, #68]	; 0x44
 8003c4a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c50:	e841 2300 	strex	r3, r2, [r1]
 8003c54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e5      	bne.n	8003c28 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3314      	adds	r3, #20
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	e853 3f00 	ldrex	r3, [r3]
 8003c6a:	623b      	str	r3, [r7, #32]
   return(result);
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c72:	663b      	str	r3, [r7, #96]	; 0x60
 8003c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3314      	adds	r3, #20
 8003c7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c7c:	633a      	str	r2, [r7, #48]	; 0x30
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c84:	e841 2300 	strex	r3, r2, [r1]
 8003c88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e5      	bne.n	8003c5c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d119      	bne.n	8003cd4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	e853 3f00 	ldrex	r3, [r3]
 8003cae:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 0310 	bic.w	r3, r3, #16
 8003cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	330c      	adds	r3, #12
 8003cbe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003cc0:	61fa      	str	r2, [r7, #28]
 8003cc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	69b9      	ldr	r1, [r7, #24]
 8003cc6:	69fa      	ldr	r2, [r7, #28]
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	617b      	str	r3, [r7, #20]
   return(result);
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e5      	bne.n	8003ca0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d106      	bne.n	8003cf0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003cea:	f7ff ff67 	bl	8003bbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003cee:	e002      	b.n	8003cf6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003cf0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003cf2:	f7ff ff48 	bl	8003b86 <HAL_UART_RxCpltCallback>
}
 8003cf6:	bf00      	nop
 8003cf8:	3770      	adds	r7, #112	; 0x70
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b084      	sub	sp, #16
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d108      	bne.n	8003d2c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d1e:	085b      	lsrs	r3, r3, #1
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	4619      	mov	r1, r3
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f7ff ff49 	bl	8003bbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d2a:	e002      	b.n	8003d32 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f7ff ff33 	bl	8003b98 <HAL_UART_RxHalfCpltCallback>
}
 8003d32:	bf00      	nop
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	bf14      	ite	ne
 8003d5a:	2301      	movne	r3, #1
 8003d5c:	2300      	moveq	r3, #0
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b21      	cmp	r3, #33	; 0x21
 8003d6c:	d108      	bne.n	8003d80 <UART_DMAError+0x46>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2200      	movs	r2, #0
 8003d78:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003d7a:	68b8      	ldr	r0, [r7, #8]
 8003d7c:	f000 f8c2 	bl	8003f04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	bf14      	ite	ne
 8003d8e:	2301      	movne	r3, #1
 8003d90:	2300      	moveq	r3, #0
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b22      	cmp	r3, #34	; 0x22
 8003da0:	d108      	bne.n	8003db4 <UART_DMAError+0x7a>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2200      	movs	r2, #0
 8003dac:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003dae:	68b8      	ldr	r0, [r7, #8]
 8003db0:	f000 f8cf 	bl	8003f52 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db8:	f043 0210 	orr.w	r2, r3, #16
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dc0:	68b8      	ldr	r0, [r7, #8]
 8003dc2:	f7ff fef2 	bl	8003baa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dc6:	bf00      	nop
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b098      	sub	sp, #96	; 0x60
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	88fa      	ldrh	r2, [r7, #6]
 8003de8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2222      	movs	r2, #34	; 0x22
 8003df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfc:	4a3e      	ldr	r2, [pc, #248]	; (8003ef8 <UART_Start_Receive_DMA+0x128>)
 8003dfe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e04:	4a3d      	ldr	r2, [pc, #244]	; (8003efc <UART_Start_Receive_DMA+0x12c>)
 8003e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0c:	4a3c      	ldr	r2, [pc, #240]	; (8003f00 <UART_Start_Receive_DMA+0x130>)
 8003e0e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e14:	2200      	movs	r2, #0
 8003e16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003e18:	f107 0308 	add.w	r3, r7, #8
 8003e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3304      	adds	r3, #4
 8003e28:	4619      	mov	r1, r3
 8003e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	f7fe fa26 	bl	8002280 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d019      	beq.n	8003e86 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	330c      	adds	r3, #12
 8003e58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e5c:	e853 3f00 	ldrex	r3, [r3]
 8003e60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e68:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	330c      	adds	r3, #12
 8003e70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e72:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003e74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e76:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003e78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e7a:	e841 2300 	strex	r3, r2, [r1]
 8003e7e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1e5      	bne.n	8003e52 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3314      	adds	r3, #20
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e90:	e853 3f00 	ldrex	r3, [r3]
 8003e94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	657b      	str	r3, [r7, #84]	; 0x54
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3314      	adds	r3, #20
 8003ea4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ea6:	63ba      	str	r2, [r7, #56]	; 0x38
 8003ea8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eaa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003eac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003eae:	e841 2300 	strex	r3, r2, [r1]
 8003eb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1e5      	bne.n	8003e86 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3314      	adds	r3, #20
 8003ec0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	617b      	str	r3, [r7, #20]
   return(result);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ed0:	653b      	str	r3, [r7, #80]	; 0x50
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3314      	adds	r3, #20
 8003ed8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003eda:	627a      	str	r2, [r7, #36]	; 0x24
 8003edc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	6a39      	ldr	r1, [r7, #32]
 8003ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee2:	e841 2300 	strex	r3, r2, [r1]
 8003ee6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1e5      	bne.n	8003eba <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3760      	adds	r7, #96	; 0x60
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	08003bd3 	.word	0x08003bd3
 8003efc:	08003cff 	.word	0x08003cff
 8003f00:	08003d3b 	.word	0x08003d3b

08003f04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b089      	sub	sp, #36	; 0x24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	330c      	adds	r3, #12
 8003f12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	e853 3f00 	ldrex	r3, [r3]
 8003f1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	69fa      	ldr	r2, [r7, #28]
 8003f2c:	61ba      	str	r2, [r7, #24]
 8003f2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f30:	6979      	ldr	r1, [r7, #20]
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	e841 2300 	strex	r3, r2, [r1]
 8003f38:	613b      	str	r3, [r7, #16]
   return(result);
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e5      	bne.n	8003f0c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003f48:	bf00      	nop
 8003f4a:	3724      	adds	r7, #36	; 0x24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr

08003f52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b095      	sub	sp, #84	; 0x54
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	330c      	adds	r3, #12
 8003f60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f64:	e853 3f00 	ldrex	r3, [r3]
 8003f68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	330c      	adds	r3, #12
 8003f78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f7a:	643a      	str	r2, [r7, #64]	; 0x40
 8003f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f82:	e841 2300 	strex	r3, r2, [r1]
 8003f86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1e5      	bne.n	8003f5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3314      	adds	r3, #20
 8003f94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	e853 3f00 	ldrex	r3, [r3]
 8003f9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f023 0301 	bic.w	r3, r3, #1
 8003fa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3314      	adds	r3, #20
 8003fac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fb6:	e841 2300 	strex	r3, r2, [r1]
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1e5      	bne.n	8003f8e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d119      	bne.n	8003ffe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	330c      	adds	r3, #12
 8003fd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	e853 3f00 	ldrex	r3, [r3]
 8003fd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f023 0310 	bic.w	r3, r3, #16
 8003fe0:	647b      	str	r3, [r7, #68]	; 0x44
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	330c      	adds	r3, #12
 8003fe8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fea:	61ba      	str	r2, [r7, #24]
 8003fec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	6979      	ldr	r1, [r7, #20]
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	e841 2300 	strex	r3, r2, [r1]
 8003ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1e5      	bne.n	8003fca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800400c:	bf00      	nop
 800400e:	3754      	adds	r7, #84	; 0x54
 8004010:	46bd      	mov	sp, r7
 8004012:	bc80      	pop	{r7}
 8004014:	4770      	bx	lr

08004016 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b084      	sub	sp, #16
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f7ff fdba 	bl	8003baa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004036:	bf00      	nop
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800403e:	b480      	push	{r7}
 8004040:	b085      	sub	sp, #20
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b21      	cmp	r3, #33	; 0x21
 8004050:	d13e      	bne.n	80040d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405a:	d114      	bne.n	8004086 <UART_Transmit_IT+0x48>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d110      	bne.n	8004086 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004078:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	1c9a      	adds	r2, r3, #2
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	621a      	str	r2, [r3, #32]
 8004084:	e008      	b.n	8004098 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	1c59      	adds	r1, r3, #1
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6211      	str	r1, [r2, #32]
 8004090:	781a      	ldrb	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	4619      	mov	r1, r3
 80040a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10f      	bne.n	80040cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	e000      	b.n	80040d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040d0:	2302      	movs	r3, #2
  }
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr

080040dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7ff fd39 	bl	8003b74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08c      	sub	sp, #48	; 0x30
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b22      	cmp	r3, #34	; 0x22
 800411e:	f040 80ae 	bne.w	800427e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412a:	d117      	bne.n	800415c <UART_Receive_IT+0x50>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d113      	bne.n	800415c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004134:	2300      	movs	r3, #0
 8004136:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	b29b      	uxth	r3, r3
 8004146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414a:	b29a      	uxth	r2, r3
 800414c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004154:	1c9a      	adds	r2, r3, #2
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	629a      	str	r2, [r3, #40]	; 0x28
 800415a:	e026      	b.n	80041aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004160:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004162:	2300      	movs	r3, #0
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416e:	d007      	beq.n	8004180 <UART_Receive_IT+0x74>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10a      	bne.n	800418e <UART_Receive_IT+0x82>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d106      	bne.n	800418e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	b2da      	uxtb	r2, r3
 8004188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418a:	701a      	strb	r2, [r3, #0]
 800418c:	e008      	b.n	80041a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800419a:	b2da      	uxtb	r2, r3
 800419c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	4619      	mov	r1, r3
 80041b8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d15d      	bne.n	800427a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0220 	bic.w	r2, r2, #32
 80041cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695a      	ldr	r2, [r3, #20]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0201 	bic.w	r2, r2, #1
 80041ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004200:	2b01      	cmp	r3, #1
 8004202:	d135      	bne.n	8004270 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	330c      	adds	r3, #12
 8004210:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	e853 3f00 	ldrex	r3, [r3]
 8004218:	613b      	str	r3, [r7, #16]
   return(result);
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f023 0310 	bic.w	r3, r3, #16
 8004220:	627b      	str	r3, [r7, #36]	; 0x24
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	330c      	adds	r3, #12
 8004228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422a:	623a      	str	r2, [r7, #32]
 800422c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	69f9      	ldr	r1, [r7, #28]
 8004230:	6a3a      	ldr	r2, [r7, #32]
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	61bb      	str	r3, [r7, #24]
   return(result);
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e5      	bne.n	800420a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b10      	cmp	r3, #16
 800424a:	d10a      	bne.n	8004262 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004266:	4619      	mov	r1, r3
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff fca7 	bl	8003bbc <HAL_UARTEx_RxEventCallback>
 800426e:	e002      	b.n	8004276 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff fc88 	bl	8003b86 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	e002      	b.n	8004280 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	e000      	b.n	8004280 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800427e:	2302      	movs	r3, #2
  }
}
 8004280:	4618      	mov	r0, r3
 8004282:	3730      	adds	r7, #48	; 0x30
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042c2:	f023 030c 	bic.w	r3, r3, #12
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	68b9      	ldr	r1, [r7, #8]
 80042cc:	430b      	orrs	r3, r1
 80042ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a2c      	ldr	r2, [pc, #176]	; (800439c <UART_SetConfig+0x114>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d103      	bne.n	80042f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042f0:	f7fe ff9a 	bl	8003228 <HAL_RCC_GetPCLK2Freq>
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	e002      	b.n	80042fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042f8:	f7fe ff82 	bl	8003200 <HAL_RCC_GetPCLK1Freq>
 80042fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	009a      	lsls	r2, r3, #2
 8004308:	441a      	add	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	fbb2 f3f3 	udiv	r3, r2, r3
 8004314:	4a22      	ldr	r2, [pc, #136]	; (80043a0 <UART_SetConfig+0x118>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	0119      	lsls	r1, r3, #4
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4613      	mov	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	009a      	lsls	r2, r3, #2
 8004328:	441a      	add	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	fbb2 f2f3 	udiv	r2, r2, r3
 8004334:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <UART_SetConfig+0x118>)
 8004336:	fba3 0302 	umull	r0, r3, r3, r2
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	2064      	movs	r0, #100	; 0x64
 800433e:	fb00 f303 	mul.w	r3, r0, r3
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	3332      	adds	r3, #50	; 0x32
 8004348:	4a15      	ldr	r2, [pc, #84]	; (80043a0 <UART_SetConfig+0x118>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004354:	4419      	add	r1, r3
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	009a      	lsls	r2, r3, #2
 8004360:	441a      	add	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	fbb2 f2f3 	udiv	r2, r2, r3
 800436c:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <UART_SetConfig+0x118>)
 800436e:	fba3 0302 	umull	r0, r3, r3, r2
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	2064      	movs	r0, #100	; 0x64
 8004376:	fb00 f303 	mul.w	r3, r0, r3
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	3332      	adds	r3, #50	; 0x32
 8004380:	4a07      	ldr	r2, [pc, #28]	; (80043a0 <UART_SetConfig+0x118>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	f003 020f 	and.w	r2, r3, #15
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	440a      	add	r2, r1
 8004392:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004394:	bf00      	nop
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40013800 	.word	0x40013800
 80043a0:	51eb851f 	.word	0x51eb851f

080043a4 <__libc_init_array>:
 80043a4:	b570      	push	{r4, r5, r6, lr}
 80043a6:	2600      	movs	r6, #0
 80043a8:	4d0c      	ldr	r5, [pc, #48]	; (80043dc <__libc_init_array+0x38>)
 80043aa:	4c0d      	ldr	r4, [pc, #52]	; (80043e0 <__libc_init_array+0x3c>)
 80043ac:	1b64      	subs	r4, r4, r5
 80043ae:	10a4      	asrs	r4, r4, #2
 80043b0:	42a6      	cmp	r6, r4
 80043b2:	d109      	bne.n	80043c8 <__libc_init_array+0x24>
 80043b4:	f000 f822 	bl	80043fc <_init>
 80043b8:	2600      	movs	r6, #0
 80043ba:	4d0a      	ldr	r5, [pc, #40]	; (80043e4 <__libc_init_array+0x40>)
 80043bc:	4c0a      	ldr	r4, [pc, #40]	; (80043e8 <__libc_init_array+0x44>)
 80043be:	1b64      	subs	r4, r4, r5
 80043c0:	10a4      	asrs	r4, r4, #2
 80043c2:	42a6      	cmp	r6, r4
 80043c4:	d105      	bne.n	80043d2 <__libc_init_array+0x2e>
 80043c6:	bd70      	pop	{r4, r5, r6, pc}
 80043c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043cc:	4798      	blx	r3
 80043ce:	3601      	adds	r6, #1
 80043d0:	e7ee      	b.n	80043b0 <__libc_init_array+0xc>
 80043d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d6:	4798      	blx	r3
 80043d8:	3601      	adds	r6, #1
 80043da:	e7f2      	b.n	80043c2 <__libc_init_array+0x1e>
 80043dc:	0800445c 	.word	0x0800445c
 80043e0:	0800445c 	.word	0x0800445c
 80043e4:	0800445c 	.word	0x0800445c
 80043e8:	08004460 	.word	0x08004460

080043ec <memset>:
 80043ec:	4603      	mov	r3, r0
 80043ee:	4402      	add	r2, r0
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d100      	bne.n	80043f6 <memset+0xa>
 80043f4:	4770      	bx	lr
 80043f6:	f803 1b01 	strb.w	r1, [r3], #1
 80043fa:	e7f9      	b.n	80043f0 <memset+0x4>

080043fc <_init>:
 80043fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fe:	bf00      	nop
 8004400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004402:	bc08      	pop	{r3}
 8004404:	469e      	mov	lr, r3
 8004406:	4770      	bx	lr

08004408 <_fini>:
 8004408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440a:	bf00      	nop
 800440c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800440e:	bc08      	pop	{r3}
 8004410:	469e      	mov	lr, r3
 8004412:	4770      	bx	lr
